var oldGeoDash = window.GeoDash, GeoDash = {};

GeoDash.version = "0.1-dev", GeoDash.noConflict = function() {
    return window.GeoDash = oldGeoDash, this;
}, window.GeoDash = GeoDash, GeoDash.Chart = function(t, i) {
    this.el = t, this.setOptions(i), this.drawChart();
}, GeoDash.Chart.prototype.setOptions = function(t) {
    for (var i in this.defaults) this.defaults.hasOwnProperty(i) && void 0 === t[i] && (t[i] = this.defaults[i]);
    this.options = t;
}, GeoDash.Chart.prototype.drawChart = function() {}, GeoDash.Chart.prototype.update = function() {}, 
GeoDash.BarChart = function(t, i) {
    this.defaults = {
        x: "x",
        y: "y",
        barColor: "#f00"
    }, GeoDash.Chart.call(this, t, i);
}, GeoDash.BarChart.prototype = new GeoDash.Chart(), GeoDash.BarChart.prototype.constructor = GeoDash.BarChart, 
GeoDash.BarChart.prototype.drawChart = function() {
    this.margin = {
        top: 20,
        right: 20,
        bottom: 30,
        left: 40
    }, this.width = ("auto" === this.options.width || void 0 === this.options.width ? $(this.el).width() : this.options.width) - this.margin.left - this.margin.right, 
    this.height = ("auto" === this.options.height || void 0 === this.options.height ? $(this.el).height() : this.options.height) - this.margin.top - this.margin.bottom, 
    this.formatPercent = d3.format(".0%"), this.x = d3.scale.ordinal().rangeRoundBands([ 0, this.width ], .05), 
    this.y = d3.scale.linear().range([ this.height, 0 ]), this.xAxis = d3.svg.axis().scale(this.x).orient("bottom").tickFormat(function() {
        return "";
    }), this.yAxis = d3.svg.axis().scale(this.y).orient("left").ticks(1).tickFormat(this.formatPercent), 
    this.svg = d3.select(this.el).append("svg").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
}, GeoDash.BarChart.prototype.update = function(t) {
    var i = this, o = this.options.y, a = this.options.x;
    t.forEach(function(t) {
        t[o] = +t[o];
    }), this.x.domain(t.map(function(t) {
        return t[a];
    })), this.y.domain([ 0, d3.max(t, function(t) {
        return t[o];
    }) ]), this.svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(this.xAxis), 
    this.svg.append("g").attr("class", "y axis").call(this.yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text("Frequency"), 
    this.svg.selectAll(".bar").data(t).enter().append("rect").attr("class", "bar").attr("x", function(t) {
        return i.x(t[a]);
    }).attr("width", i.x.rangeBand()).attr("y", function(t) {
        return i.y(t[o]);
    }).attr("height", function(t) {
        return i.height - i.y(t[o]);
    }).style("fill", this.options.barColor);
}, GeoDash.LineChart = function(t, i) {
    this.defaults = {
        x: "x",
        y: "y",
        width: "auto",
        height: "auto",
        colors: [ "#d80000", "#006200" ],
        interpolate: "monotone",
        dotRadius: 3
    }, GeoDash.Chart.call(this, t, i);
}, GeoDash.LineChart.prototype = new GeoDash.Chart(), GeoDash.LineChart.prototype.constructor = GeoDash.LineChart, 
GeoDash.LineChart.prototype.drawChart = function() {
    var t = this;
    this.margin = {
        top: 50,
        right: 20,
        bottom: 30,
        left: 50
    }, this.width = ("auto" === this.options.width || void 0 === this.options.width ? $(this.el).width() : this.options.width) - this.margin.left - this.margin.right, 
    this.height = ("auto" === this.options.height || void 0 === this.options.height ? $(this.el).height() : this.options.height) - this.margin.top - this.margin.bottom, 
    this.x = d3.time.scale().range([ 0, this.width ]), this.y = d3.scale.linear().range([ this.height, 0 ]), 
    this.xAxis = d3.svg.axis().scale(this.x).tickSize(-1 * this.height).orient("bottom"), 
    this.yAxis = d3.svg.axis().scale(this.y).tickSize(-1 * this.width).orient("left"), 
    this.color = d3.scale.ordinal().range(this.options.colors), this.line = d3.svg.line().interpolate(this.options.interpolate).x(function(i) {
        return t.x(i.date);
    }).y(function(i) {
        return t.y(i.value);
    }), this.formatComma = d3.format(",");
    var i = d3.select(this.el).append("svg").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
    i.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(this.xAxis), 
    i.append("g").attr("class", "y axis").call(this.yAxis);
}, GeoDash.LineChart.prototype.hoverOnDot = function(t, i, o) {
    var a = this.formatComma(t.value), s = 55 + this.x(t.date), e = 45 + this.y(t.value);
    d3.select(o).transition().attr("r", this.options.dotRadius + 3);
    var h = $(".line").get(0).getBBox().width;
    this.x(t.date) >= h && (s -= 55), $(".hoverbox").css("left", s), $(".hoverbox").css("top", e), 
    $(".hoverbox").html(a), $(".hoverbox").fadeIn(200);
}, GeoDash.LineChart.prototype.hoverOffDot = function(t, i, o) {
    $(".hoverbox").fadeOut(200), d3.select(o).transition().attr("r", this.options.dotRadius);
}, GeoDash.LineChart.prototype.update = function(t) {
    var i = this;
    this.color.domain(d3.keys(t[0]).filter(function(t) {
        return t !== i.options.x;
    }));
    var o = this.color.domain().map(function(o) {
        return {
            name: o,
            values: t.map(function(t) {
                return {
                    date: t[i.options.x],
                    value: +t[o]
                };
            })
        };
    });
    this.x.domain(d3.extent(t, function(t) {
        return t[i.options.x];
    })), this.y.domain([ d3.min(o, function(t) {
        return d3.min(t.values, function(t) {
            return t.value;
        });
    }), d3.max(o, function(t) {
        return d3.max(t.values, function(t) {
            return t.value;
        });
    }) ]);
    var a = d3.select(this.el + " svg g");
    a.select(".y.axis").transition().call(this.yAxis), a.select(".x.axis").transition().call(this.xAxis);
    var s = function(t, i) {
        return 10 * i;
    }, e = a.selectAll(".line").data(o);
    e.transition().duration(500).delay(s).attr("d", function(t) {
        return i.line(t.values);
    }), e.enter().append("path").attr("class", "line").attr("d", function(t) {
        return i.line(t.values);
    }).style("stroke", function(t) {
        return i.color(t.name);
    });
    for (var h = 0; h < o.length; h++) {
        var r = o[h].values, n = a.selectAll(".dotset" + h).data(r);
        n.transition().duration(500).delay(s).attr("data", function(t) {
            return t.value;
        }).attr("cx", function(t) {
            return i.x(t[i.options.x]);
        }).attr("cy", function(t) {
            return i.y(t.value);
        }), n.enter().append("circle").attr("class", "dot dotset" + h).attr("r", this.options.dotRadius).style("fill", function() {
            return i.color(o[h].name);
        }).attr("data", function(t) {
            return t.value;
        }).on("mouseover", function(t, o) {
            i.hoverOnDot(t, o, this);
        }).on("mouseout", function(t, o) {
            i.hoverOffDot(t, o, this);
        }).attr("cx", function(t) {
            return i.x(t[i.options.x]);
        }).attr("cy", function(t) {
            return i.y(t.value);
        });
    }
}, GeoDash.PieChart = function(t, i) {
    this.defaults = {
        label: "label",
        value: "value",
        colors: [ "#f00", "#0f0", "#00f" ],
        innerRadius: 10
    }, GeoDash.Chart.call(this, t, i);
}, GeoDash.PieChart.prototype = new GeoDash.Chart(), GeoDash.PieChart.prototype.constructor = GeoDash.PieChart, 
GeoDash.PieChart.prototype.drawChart = function() {
    var t = this;
    this.width = "auto" === this.options.width || void 0 === this.options.width ? $(this.el).width() : this.options.width, 
    this.height = "auto" === this.options.height || void 0 === this.options.width ? $(this.el).height() : this.options.height, 
    this.radius = Math.min(this.width, this.height) / 2, this.color = d3.scale.ordinal().range(this.options.colors), 
    this.arc = d3.svg.arc().outerRadius(this.radius).innerRadius(this.options.innerRadius), 
    this.pie = d3.layout.pie().sort(null).value(function(i) {
        return i[t.options.value];
    }), this.svg = d3.select(this.el).append("svg").attr("width", this.width).attr("height", this.height).append("g").attr("transform", "translate(" + this.width / 2 + "," + this.height / 2 + ")");
}, GeoDash.PieChart.prototype.update = function(t) {
    var i = this;
    t.forEach(function(t) {
        t[i.options.value] = +t[i.options.value];
    });
    var o = this.svg.selectAll(".arc").data(this.pie(t)).enter().append("g").attr("class", "arc");
    o.append("path").attr("d", this.arc).style("fill", function(t) {
        return i.color(t.data[i.options.label]);
    }).on("mouseover", function(t) {
        $(i.el).parent().find(".hover-box").html(t.value + "%");
    }).on("mouseout", function() {
        $(i.el).parent().find(".hover-box").html("");
    });
};