var _ezoop = window.ezoop, ezoop = function() {};

ezoop.noConflict = function() {
    return window.ezoop = _ezoop, this;
}, window.ezoop = ezoop, ezoop.ExtendedClass = function(t, i) {
    return ezoop.Class(t, i);
}, ezoop.BaseClass = function(t) {
    return ezoop.Class(null, t);
}, ezoop.Class = function(t, i) {
    var e = null, o = ezoop.Class;
    return null == t || "undefined" == typeof t ? (e = function() {
        "undefined" != typeof this.initialize && this.initialize.apply(this, arguments);
    }, e.prototype = i) : (e = function() {
        if ("undefined" != typeof t.prototype) {
            var i = t.prototype.initialize;
            "function" == typeof i && i.apply(this, arguments);
        }
        var e = "function" == typeof this.initialize ? this.initialize : "undefined";
        "function" == typeof e && e.apply(this, arguments);
    }, o.inheritPrototype(e, t), o.augmentPrototype(e.prototype, i)), e;
}, ezoop.Class.inheritPrototype = function(t, i) {
    var e = function() {};
    e.prototype = i.prototype, t.prototype = new e(), t.prototype.constructor = t, t.parent = i.prototype;
}, ezoop.Class.augmentPrototype = function(t, i) {
    if (t = t || {}, i) {
        for (var e in i) {
            var o = i[e];
            void 0 !== o && (t[e] = o);
        }
        var s = "function" == typeof window.Event && i instanceof window.Event;
        !s && i.hasOwnProperty && i.hasOwnProperty("toString") && (t.toString = i.toString);
    }
};

var oldGeoDash = window.GeoDash, GeoDash = function() {};

GeoDash.version = "0.1-dev", GeoDash.noConflict = function() {
    return window.GeoDash = oldGeoDash, this;
}, window.GeoDash = GeoDash, GeoDash.Class = function(t) {
    var i = t, e = i.extend, o = null, s = GeoDash.Class;
    return null == e || "undefined" == typeof e ? (o = function() {
        "undefined" != typeof this.initialize && this.initialize.apply(this, arguments);
    }, o.prototype = i) : (o = function() {
        if ("undefined" != typeof e.prototype) {
            var t = e.prototype.initialize;
            "function" == typeof t && t.apply(this, arguments);
        }
        var i = "function" == typeof this.initialize ? this.initialize : "undefined";
        "function" == typeof i && i.apply(this, arguments);
    }, s.inheritPrototype(o, e), s.augmentPrototype(o.prototype, i)), o;
}, GeoDash.Class.inheritPrototype = function(t, i) {
    var e = function() {};
    e.prototype = i.prototype, t.prototype = new e(), t.prototype.constructor = t, t.parent = i.prototype;
}, GeoDash.Class.augmentPrototype = function(t, i) {
    if (t = t || {}, i) {
        for (var e in i) {
            var o = i[e];
            void 0 !== o && (t[e] = o);
        }
        var s = "function" == typeof window.Event && i instanceof window.Event;
        !s && i.hasOwnProperty && i.hasOwnProperty("toString") && (t.toString = i.toString);
    }
}, GeoDash.Chart = ezoop.BaseClass({
    className: "Chart",
    initialize: function(t, i) {
        this.el = t, this.options = {}, this.setOptions(i), this.makeTitle(), this.setUpChart(), 
        this.drawChart();
    },
    setOptions: function(t) {
        for (var i in this.defaults) this.defaults.hasOwnProperty(i) && void 0 === t[i] && (t[i] = this.defaults[i]);
        this.options = t;
    },
    setUpChart: function() {
        d3.select(this.el).style("position", "relative");
    },
    drawChart: function() {},
    update: function() {},
    makeTitle: function() {
        if (this.options.title) {
            var t = '<div class="geodash-title">';
            t += this.options.title, t += "</div>", d3.select(this.el).html(t);
        }
    }
}), GeoDash.TableChart = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "TableChart",
    defaults: {
        highlight: [],
        format: !1
    },
    initialize: function() {},
    drawChart: function() {
        this.margin = {
            top: 20,
            right: 10,
            bottom: 20,
            left: 40
        }, this.width = ("auto" === this.options.width || void 0 === this.options.width ? parseInt(d3.select(this.el).style("width")) : this.options.width) - this.margin.left - this.margin.right, 
        this.height = ("auto" === this.options.height || void 0 === this.options.height ? parseInt(d3.select(this.el).style("height")) : this.options.height) - this.margin.top - this.margin.bottom, 
        this.options.title && (this.height = this.height - 30), this.formatPercent = d3.format(".2%"), 
        this.formatPercentAxisLabel = d3.format(".0%"), this.formatLarge = d3.format("s"), 
        this.formatComma = d3.format(",.2f"), this.table = d3.select(this.el).append("table").attr("width", this.width + this.margin.left + this.margin.right).attr("class", "table table-condensed table-bordered gd-table"), 
        this.tbody = this.table.append("tbody");
    },
    update: function(t) {
        var i = this, e = this.tbody.selectAll("tr").data(t).attr("style", function(t) {
            for (var e = t[i.options.columns[0]], o = 0; o < i.options.highlight.length; o++) if (i.options.highlight[o] == e) return "background:" + i.options.color;
            return "";
        });
        e.enter().append("tr").attr("style", function(t) {
            for (var e = t[i.options.columns[0]], o = 0; o < i.options.highlight.length; o++) if (i.options.highlight[o] == e) return "background:" + i.options.color;
            return "";
        }), e.exit().remove();
        var o = e.selectAll("td").data(function(t) {
            return i.options.columns.map(function(i) {
                return {
                    column: i,
                    value: t[i]
                };
            });
        });
        return o.transition().text(function(t) {
            return i.format(t);
        }), o.enter().append("td").text(function(t) {
            return i.format(t);
        }), o.exit().remove(), this;
    },
    format: function(t) {
        var i = "", e = this;
        if (null === t.value) return i = "NA";
        if (isNaN(parseFloat(t.value))) i = t.value; else {
            if (e.options.format) {
                var o = d3.format(",." + e.options.format.precision + "f");
                i = o(t.value);
            } else i = e.formatComma(t.value);
            e.options.money && (i = "$" + i), e.options.percent && (i += "%");
        }
        return i;
    }
}), GeoDash.LineChart = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "LineChart",
    defaults: {
        x: "x",
        y: "y",
        width: "auto",
        height: "auto",
        colors: [ "#d80000", "#006200" ],
        interpolate: "monotone",
        dotRadius: 3,
        title: !1,
        opacity: .5,
        strokeWidth: 2,
        axisLabels: !1,
        xInterval: "auto",
        dashed: !1,
        time: !0
    },
    initialize: function() {},
    drawChart: function() {
        var t = this;
        this.margin = {
            top: 10,
            right: 20,
            bottom: 30,
            left: 50
        }, this.width = ("auto" === this.options.width || void 0 === this.options.width ? parseInt(d3.select(this.el).style("width")) : this.options.width) - this.margin.left - this.margin.right, 
        this.height = ("auto" === this.options.height || void 0 === this.options.height ? parseInt(d3.select(this.el).style("height")) : this.options.height) - this.margin.top - this.margin.bottom, 
        this.options.title && (this.height = this.height - 30), this.formatComma = d3.format(",f.2"), 
        this.formatLarge = d3.format("s"), this.x = this.options.time ? d3.time.scale().range([ 0, this.width ]) : d3.scale.linear().range([ 0, this.width ]), 
        this.y = d3.scale.linear().range([ this.height, 0 ]), this.xAxis = d3.svg.axis().scale(this.x).tickSize(-1 * this.height).tickPadding(5).orient("bottom"), 
        this.yAxis = d3.svg.axis().scale(this.y).tickSize(-1 * this.width).tickPadding(10).orient("left").tickFormat(function(i) {
            return t.formatLarge(i);
        }), this.color = d3.scale.ordinal().range(this.options.colors), this.line = d3.svg.line().interpolate(this.options.interpolate).x(function(i) {
            return t.x(i.date);
        }).y(function(i) {
            return t.y(i.value);
        });
        var i = d3.select(this.el).append("svg").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).attr("class", "linechart-svg").append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        i.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(this.xAxis), 
        i.append("g").attr("class", "y axis").call(this.yAxis), t.options.axisLabels && i.select(".y.axis").append("text").attr("class", "axis-label").attr("transform", "rotate(-90)").attr("y", 0 - this.margin.left).attr("x", 0 - this.height / 2).attr("dy", "1em").style("text-anchor", "middle").text(t.options.yAxisLabel), 
        d3.select(t.el).append("div").attr("class", "hoverbox");
    },
    hoverOnDot: function(t, i, e) {
        var o = this, s = this.formatComma(t.value), n = 55 + this.x(t.date), a = 25 + this.y(t.value);
        d3.select(e).transition().attr("r", this.options.dotRadius + 3);
        var r = d3.select(o.el).select(".line")[0][0].getBBox().width;
        this.x(t.date) >= r && (n -= 55), d3.select(o.el).select(".hoverbox").style("right", "auto"), 
        d3.select(o.el).select(".hoverbox").style("left", n + "px"), d3.select(o.el).select(".hoverbox").style("top", a + "px"), 
        d3.select(o.el).select(".hoverbox").html(s), d3.select(o.el).select(".hoverbox").transition().style("display", "inline");
    },
    hoverOffDot: function(t, i, e) {
        var o = this;
        d3.select(o.el).select(".hoverbox").transition().style("display", "none"), d3.select(e).transition().attr("r", this.options.dotRadius);
    },
    setYAxisLabel: function(t) {
        var i = this;
        d3.select(i.el).select(".y.axis .axis-label").text(t);
    },
    update: function(t) {
        var i = this;
        this.color = d3.scale.ordinal().range(this.options.colors), this.color.domain(d3.keys(t[0]).filter(function(t) {
            return t !== i.options.x;
        }));
        var e = this.color.domain().map(function(e) {
            return {
                name: e,
                values: t.map(function(t) {
                    var o, s = t[i.options.x];
                    return o = null === t[e] ? null : +t[e], {
                        date: s,
                        value: o
                    };
                })
            };
        });
        if (this.options.dashed) {
            var o = [];
            this.options.dashed.forEach(function(t) {
                var i = e[t.line];
                if ("undefined" != typeof i) {
                    var s = {};
                    s.name = JSON.parse(JSON.stringify(i.name)), s.values = [], s.dashed = !0, t.span.forEach(function(t) {
                        for (var e = t.start; e <= t.end; e++) s.values.push({
                            date: i.values[e].date,
                            value: JSON.parse(JSON.stringify(i.values[e].value))
                        }), e !== t.end && (i.values[e].value = null);
                    }), o.push(s);
                }
            }), o.forEach(function(t) {
                e.push(t);
            });
        }
        for (var s = 0; s < e.length; s++) {
            for (var n = [], a = 0; a < e[s].values.length; a++) {
                var r = e[s].values[a].value;
                isNaN(r) || null === r || n.push(e[s].values[a]);
            }
            e[s].values = n;
        }
        this.x.domain(d3.extent(t, function(t) {
            return t[i.options.x];
        })), this.y.domain([ d3.min(e, function(t) {
            return d3.min(t.values, function(t) {
                return t.value;
            });
        }), d3.max(e, function(t) {
            return d3.max(t.values, function(t) {
                return t.value;
            });
        }) ]);
        var l = this.y.domain();
        this.y.domain([ l[0] - .1 * l[0], l[1] + .1 * l[1] ]);
        var h = d3.select(this.el + " svg g");
        "auto" == i.options.xInterval ? this.xAxis.ticks(t.length) : this.xAxis.ticks(i.options.xInterval), 
        h.select(".y.axis").transition().call(this.yAxis), h.select(".x.axis").transition().call(this.xAxis);
        var d = function(t, i) {
            return 10 * i;
        }, p = h.selectAll(".line_group").data(e), c = h.selectAll(".line").data(e);
        c.transition().duration(500).delay(d).style("stroke", function(t) {
            return i.color(t.name);
        }).style("stroke-dasharray", function(t) {
            return t.dashed ? "5, 5" : "none";
        }).attr("d", function(t) {
            return i.line(t.values);
        }), c.enter().append("g").attr("class", function(t, i) {
            return "line_group line_group" + i;
        }).append("path").attr("class", "line").attr("d", function(t) {
            return i.line(t.values);
        }).style("stroke", function(t) {
            return i.color(t.name);
        }).style("stroke-width", i.options.strokeWidth).style("stroke-dasharray", function(t) {
            return t.dashed ? "5, 5" : "none";
        }).style("stroke-opacity", i.options.opacity), c.exit().selectAll(".dot"), c.exit().remove(), 
        p.exit().remove();
        for (var s = 0; s < e.length; s++) {
            var n = e[s].values, u = h.select(".line_group" + s).selectAll(".dot").data(n);
            u.transition().duration(500).delay(d).attr("data", function(t) {
                return t.value;
            }).style("fill", function() {
                return i.color(e[s].name);
            }).attr("cx", function(t) {
                return i.x(t.date);
            }).attr("cy", function(t) {
                return i.y(t.value);
            }), u.enter().append("circle").attr("class", "dot").attr("r", this.options.dotRadius).style("fill", function() {
                return i.color(e[s].name);
            }).style("fill-opacity", i.options.opacity).attr("data", function(t) {
                return t.value;
            }).on("mouseover", function(t, e) {
                i.hoverOnDot(t, e, this);
            }).on("mouseout", function(t, e) {
                i.hoverOffDot(t, e, this);
            }).attr("cx", function(t) {
                return i.x(t.date);
            }).attr("cy", function(t) {
                return i.y(t.value);
            }), u.exit().remove();
        }
    }
}), GeoDash.PieChart = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "PieChart",
    defaults: {
        label: "label",
        value: "value",
        colors: [ "#f00", "#0f0", "#00f" ],
        innerRadius: 10,
        opacity: 1,
        drawX: !1,
        drawY: !1,
        title: !1,
        padding: 10,
        legend: !1,
        hover: !1,
        arclabels: !1
    },
    initialize: function() {},
    setColors: function(t) {
        this.color = d3.scale.ordinal().range(t);
    },
    drawChart: function() {
        var t = this;
        this.width = "auto" === this.options.width || void 0 === this.options.width ? parseInt(d3.select(this.el).style("width")) : this.options.width, 
        this.height = "auto" === this.options.height || void 0 === this.options.width ? parseInt(d3.select(this.el).style("height")) : this.options.height, 
        this.width = this.width - 2 * this.options.padding, this.height = this.height - 2 * this.options.padding, 
        this.options.title && (this.height = this.height - 30), this.radius = Math.min(this.width, this.height) / 2.2, 
        this.color = d3.scale.ordinal().range(this.options.colors), this.x = d3.scale.ordinal().range([ 0, this.width - 2 ]), 
        this.y = d3.scale.linear().range([ this.height - 2, 0 ]), this.xAxis = d3.svg.axis().scale(this.x).orient("bottom").tickSize(10, 0, 0).tickFormat(function() {
            return "";
        }), this.yAxis = d3.svg.axis().scale(this.y).orient("left").tickSize(10, 0, 0).tickFormat(function() {
            return "";
        }), this.arc = d3.svg.arc().outerRadius(this.radius).innerRadius(this.options.innerRadius), 
        this.pie = d3.layout.pie().sort(null).value(function(i) {
            return i[t.options.value];
        }), this.formatHover = d3.format(",.0f"), this.formatPercent = d3.format(".2f"), 
        this.svg = d3.select(this.el).append("svg").attr("width", this.width).attr("height", this.height).attr("class", "piechart-svg").append("g").attr("transform", "translate(" + this.width / 2 + "," + this.height / 2 + ")"), 
        this.options.hover && d3.select(this.el).append("div").attr("class", "hoverbox"), 
        this.options.drawX && (this.svg.append("g").attr("class", "x axis").attr("transform", "translate(" + -1 * (this.width / 2) + "," + 0 + ")").call(this.xAxis), 
        this.svg.select(".x.axis").selectAll(".tick").attr("transform", "translate(0,-5)")), 
        this.options.drawY && (this.svg.append("g").attr("class", "y axis").attr("transform", "translate(0," + -1 * (this.height / 2) + ")").call(this.yAxis), 
        this.svg.select(".y.axis").selectAll(".tick").attr("transform", "translate(5,0)")), 
        this.options.legend && d3.select(this.options.legend).append("svg");
    },
    update: function(t) {
        var i = this;
        i.total = 0, t.forEach(function(t) {
            t[i.options.value] = +t[i.options.value], i.total += +t[i.options.value];
        }), this.x.domain([ 0, 1 ]), this.y.domain([ 0, 1 ]), this.xAxis.tickValues([ 0, 1 ]), 
        this.yAxis.tickValues([ 0, 1 ]), this.options.drawX && svg.select(".x.axis").transition().call(this.xAxis), 
        this.options.drawY && svg.select(".y.axis").transition().call(this.yAxis);
        var e = this.svg.selectAll(".arc").data(this.pie(t));
        if (e.select("path").transition().style("fill", function(t) {
            return i.color(t.data[i.options.label]);
        }).attr("d", this.arc), e.enter().append("g").attr("class", "arc").append("path").attr("d", this.arc).style("fill", function(t) {
            return i.color(t.data[i.options.label]);
        }).style("fill-opacity", this.options.opacity).on("mouseover", function(t) {
            if (d3.select(this).style("fill-opacity", 1), i.options.hover) {
                var e = t.data[i.options.label], o = i.formatHover(t.value), s = i.formatPercent(100 * (t.value / i.total));
                d3.select(i.el).select(".hoverbox").html(e + ": " + o + " (" + s + "%)"), d3.select(i.el).select(".hoverbox").style("display", "block");
            }
        }).on("mouseout", function() {
            d3.select(i.el).select(".hoverbox").html(""), d3.select(i.el).select(".hoverbox").style("display", "none"), 
            d3.select(this).style("fill-opacity", i.options.opacity);
        }), e.exit().remove(), this.options.arclabels) {
            var o = i.svg.selectAll(".arc-text").data(this.pie(t));
            o.select("text").attr("transform", function(t) {
                return "translate(" + i.arc.centroid(t) + ")";
            }).text(function(t) {
                return t.data[i.options.label] + " (" + t.value + ")";
            }), o.enter().append("g").attr("class", "arc-text").append("text").attr("transform", function(t) {
                return "translate(" + i.arc.centroid(t) + ")";
            }).attr("dy", ".35em").style("text-anchor", "middle").text(function(t) {
                return t.data[i.options.label] + " (" + t.value + ")";
            }), o.exit().remove();
        }
        if (this.options.legend) {
            parseInt(d3.select(this.options.legend).style("width"));
            var s = {
                width: 10,
                height: 10,
                padding: 5
            }, n = d3.select(this.options.legend).select("svg"), a = n.selectAll(".legend-item").data(this.color.domain().slice());
            a.select(".legend-item").select("text").text(function(t) {
                return t;
            });
            var r = a.enter().append("g").attr("class", "legend-item").attr("transform", function(t, i) {
                return "translate(0," + i * (s.height + s.padding) + ")";
            });
            r.append("rect").attr("x", 0).attr("width", s.width).attr("height", s.height).style("fill", this.color), 
            r.append("text").attr("x", s.width + s.padding).attr("y", 4).attr("dy", ".35em").style("text-anchor", "start").text(function(t) {
                return t;
            });
        }
    }
}), GeoDash.BarChartHorizontal = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "BarChartHorizontal",
    defaults: {
        x: "x",
        y: "y",
        barColors: [ "#f00" ],
        opacity: .7,
        drawX: !1,
        drawY: !1,
        percent: !1,
        money: !1,
        title: !1,
        roundRadius: 3,
        highlight: [],
        verticalX: !1,
        invert: !1,
        barHeight: 0,
        padding: 1,
        numberTicks: 10,
        yWidth: 0,
        round: !0,
        format: !1
    },
    initialize: function() {},
    setWidth: function() {
        this.width = parseInt(d3.select(this.el).style("width")), this.width = this.width - this.margin.left - this.margin.right;
    },
    setHeight: function() {
        this.height = parseInt(d3.select(this.el).style("height")), this.height = this.height - this.margin.top - this.margin.bottom, 
        this.options.title && (this.height = this.height - 30);
    },
    drawChart: function() {
        var t = this;
        this.margin = {
            top: 10,
            right: 10,
            bottom: 10,
            left: 10
        }, 0 !== this.options.barHeight && d3.select(this.el).style("height", "auto"), this.setWidth(), 
        this.setHeight(), this.formatPercent = d3.format(".2%"), this.formatPercentAxisLabel = d3.format("p"), 
        this.formatMoney = d3.format("$"), this.formatLarge = d3.format("s"), this.formatComma = d3.format(","), 
        this.x = d3.scale.linear().range([ 0, this.width - this.margin.left - this.options.yWidth ]).nice(), 
        this.y = d3.scale.ordinal().rangeRoundBands([ 0, this.height ], .05, 0), this.svg = d3.select(this.el).append("div").attr("class", "geodash barchart-html horizontal").style("width", this.width + "px").style("margin-top", this.margin.top + "px").style("margin-bottom", this.margin.bottom + "px").style("margin-right", this.margin.right + "px").style("margin-left", this.margin.left + "px"), 
        this.options.drawX && (this.xAxisElement = this.svg.append("div").attr("class", "x axis")), 
        this.options.drawY && (this.yAxisElement = this.svg.append("div").attr("class", "y axis").style("padding-bottom", this.options.padding + "px").style("padding-top", this.options.padding + 15 + "px")), 
        this.svg.append("div").attr("class", "bars").style("margin-left", this.options.yWidth + "px").style("padding-bottom", this.options.padding + "px").style("padding-top", this.options.padding + 15 + "px"), 
        d3.select(t.el).append("div").attr("class", "hoverbox");
    },
    update: function(t) {
        var i = this;
        this.data = t;
        for (var e = this.options.y, o = this.options.x, s = 0; s < t.length; s++) {
            var n = t[s];
            null != n[o] && "string" == typeof n[o] && (n[o] = +n[o].replace(",", ""));
        }
        this.color = d3.scale.ordinal().range(this.options.barColors);
        var a = d3.extent(t, function(t) {
            return t[o];
        });
        a[0] < 0 ? this.x.domain(a) : this.x.domain([ 0, a[1] ]), this.y.domain(t.map(function(t) {
            return t[e];
        }));
        var r = this.svg.select(".bars").selectAll(".bar").data(t);
        r.transition().attr("geodash-id", function(t) {
            return t[e];
        }).style("left", function(t) {
            var e = i.x(Math.min(0, t[o]));
            return e === i.x(0) && (e += 1), e + "px";
        }).style("margin-top", function() {
            return i.options.padding + "px";
        }).style("width", function(t) {
            var e = Math.abs(i.x(t[o]) - i.x(0));
            return e + "px";
        }).style("height", function() {
            return 0 !== i.options.barHeight ? i.options.barHeight + "px" : i.y.rangeBand() + "px";
        }).style("opacity", function(t) {
            for (var o = 0; o < i.options.highlight.length; o++) if (i.options.highlight[o] == t[e]) return 1;
            return i.options.opacity;
        }).style("border-top-right-radius", function(t) {
            var e = 0, s = i.x(Math.min(0, t[o]));
            return s >= i.x(0) && (e = i.options.roundRadius), e + "px";
        }).style("border-bottom-right-radius", function(t) {
            var e = 0, s = i.x(Math.min(0, t[o]));
            return s >= i.x(0) && (e = i.options.roundRadius), e + "px";
        }).style("border-top-left-radius", function(t) {
            var e = 0, s = i.x(Math.min(0, t[o]));
            return s < i.x(0) && (e = i.options.roundRadius), e + "px";
        }).style("border-bottom-left-radius", function(t) {
            var e = 0, s = i.x(Math.min(0, t[o]));
            return s < i.x(0) && (e = i.options.roundRadius), e + "px";
        }).style("background-color", function(t) {
            return i.color(t[e]);
        }, "important");
        var l = r.enter().append("div").attr("class", "bar").attr("geodash-id", function(t) {
            return t[e];
        }).style("left", function(t) {
            var e = i.x(Math.min(0, t[o]));
            return e === i.x(0) && (e += 1), e + "px";
        }).style("margin-top", function() {
            return i.options.padding + "px";
        }).style("width", function(t) {
            var e = Math.abs(i.x(t[o]) - i.x(0));
            return e + "px";
        }).style("height", function() {
            return 0 !== i.options.barHeight ? i.options.barHeight + "px" : i.y.rangeBand() + "px";
        }).style("opacity", function(t) {
            for (var o = 0; o < i.options.highlight.length; o++) if (i.options.highlight[o] == t[e]) return 1;
            return i.options.opacity;
        }).style("border-top-right-radius", function(t) {
            var e = 0, s = i.x(Math.min(0, t[o]));
            return s >= i.x(0) && (e = i.options.roundRadius), e + "px";
        }).style("border-bottom-right-radius", function(t) {
            var e = 0, s = i.x(Math.min(0, t[o]));
            return s >= i.x(0) && (e = i.options.roundRadius), e + "px";
        }).style("border-top-left-radius", function(t) {
            var e = 0, s = i.x(Math.min(0, t[o]));
            return s < i.x(0) && (e = i.options.roundRadius), e + "px";
        }).style("border-bottom-left-radius", function(t) {
            var e = 0, s = i.x(Math.min(0, t[o]));
            return s < i.x(0) && (e = i.options.roundRadius), e + "px";
        }).style("-webkit-print-color-adjust", "exact").style("background-color", function(t) {
            return i.color(t[e]);
        }, "important");
        if (r.exit().remove(), this.options.drawY || l.on("mouseover", function(t, e) {
            i.barmouseover(t, e);
        }).on("mouseout", function(t, e) {
            i.barmouseout(t, e);
        }), this.options.drawX) {
            var h = this.x.ticks(i.options.numberTicks), d = this.xAxisElement.selectAll(".tick").data(h);
            d.transition().style("left", function(t) {
                return i.x(t) + i.options.yWidth + "px";
            });
            var p = d.enter().append("div").attr("class", "tick").style("left", function(t) {
                return i.x(t) + i.options.yWidth + "px";
            }).style("height", "100%");
            d.exit().remove(), p.append("div").attr("class", "gd-label").text(function(t) {
                var e = i.formatLarge(t);
                return i.options.money && (e = "$" + e), i.options.percent && (e += "%"), e;
            }).style("margin-left", function() {
                var t = d3.select(this).style("width"), i = -1 * (parseInt(t) / 2);
                return i + "px";
            }), p.append("div").attr("class", "line").style("height", "100%");
        }
        if (this.options.drawY) {
            var c = parseInt(d3.select(i.el).select(".bars").style("width"));
            isNaN(c) || (barWidth = c);
            var u = this.y.domain(), f = this.yAxisElement.selectAll(".gd-label").data(u);
            f.transition().style("margin-top", function() {
                return i.options.padding + "px";
            }).style("height", function() {
                return 0 !== i.options.barHeight ? i.options.barHeight + "px" : i.y.rangeBand() + "px";
            }).style("line-height", function() {
                return 0 !== i.options.barHeight ? i.options.barHeight + "px" : i.y.rangeBand() + "px";
            }).style("padding-right", function(t, e) {
                var s = i.data[e][o], n = i.x(Math.min(0, s)), a = barWidth - n + 2;
                return a + "px";
            }).select("span").text(function(t) {
                return t;
            }), f.enter().append("div").attr("class", "gd-label").style("margin-top", function() {
                return i.options.padding + "px";
            }).style("height", function() {
                return 0 !== i.options.barHeight ? i.options.barHeight + "px" : i.y.rangeBand() + "px";
            }).style("line-height", function() {
                return 0 !== i.options.barHeight ? i.options.barHeight + "px" : i.y.rangeBand() + "px";
            }).style("padding-right", function(t, e) {
                var s = i.data[e][o];
                Math.abs(i.x(s) - i.x(0));
                var n = i.x(Math.min(0, s)), a = barWidth - n + 2;
                return a + "px";
            }).on("mouseover", function(t, e) {
                i.barmouseover(t, e);
            }).on("mouseout", function(t, e) {
                i.barmouseout(t, e);
            }).append("span").text(function(t) {
                return t;
            }), f.exit().remove();
        }
    },
    barmouseover: function(t, i) {
        var e = this, o = "";
        o = "object" == typeof t ? t[e.options.y] : t;
        var s = e.data[i][e.options.x], n = d3.select(e.el).selectAll(".bar")[0][i];
        d3.select(n).style("opacity", .9);
        var a = "";
        if (null !== s) {
            if (e.options.format) {
                var r = d3.format(",." + e.options.format.precision + "f");
                a = r(s);
            } else a = e.formatComma(s);
            e.options.money && (a = "$" + a), e.options.percent && (a += "%");
        } else a = "NA";
        d3.select(e.el).select(".hoverbox").html(o + ": " + a), d3.select(e.el).select(".hoverbox").transition().style("display", "block");
    },
    barmouseout: function(t, i) {
        for (var e = this, o = e.options.opacity, s = 0; s < e.options.highlight.length; s++) e.options.highlight[s] == t && (o = 1);
        var n = d3.select(e.el).selectAll(".bar")[0][i];
        d3.select(n).style("opacity", o), d3.select(e.el).select(".hoverbox").transition().style("display", "none");
    },
    setColor: function(t) {
        this.options.barColors = t;
    }
}), GeoDash.BarChartVertical = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "BarChartVertical",
    defaults: {
        x: "x",
        y: "y",
        barColors: [ "#f00" ],
        opacity: .7,
        drawX: !1,
        drawY: !1,
        percent: !1,
        title: !1,
        roundRadius: 3,
        highlight: !1,
        verticalX: !1,
        invert: !1,
        roundRadius: 3
    },
    initialize: function() {},
    setWidth: function() {
        this.width = parseInt(d3.select(this.el).style("width")), this.width = this.width - this.margin.left - this.margin.right;
    },
    setHeight: function() {
        this.height = parseInt(d3.select(this.el).style("height")), this.height = this.height - this.margin.top, 
        this.options.title && (this.height = this.height - 30);
    },
    drawChart: function() {
        this.margin = {
            top: 10,
            right: 10,
            bottom: 20,
            left: 10
        }, this.setWidth(), this.setHeight(), this.formatPercent = d3.format(".0%"), this.formatLarge = d3.format("s"), 
        this.formatComma = d3.format(","), this.x = d3.scale.ordinal().rangeRoundBands([ 0, this.width ], .05, .5), 
        this.y = d3.scale.linear().range([ this.height - this.margin.bottom, 0 ]), this.container = d3.select(this.el).append("div").attr("class", "geodash barchart-html vertical").style("width", this.width + "px").style("height", this.height + "px").style("margin-top", this.margin.top + "px").style("margin-left", this.margin.left + "px").style("margin-right", this.margin.right + "px"), 
        this.xAxisElement = this.container.append("div").attr("class", "x axis"), this.yAxisElement = this.container.append("div").attr("class", "y axis"), 
        this.container.append("div").attr("class", "bars").style("height", this.height - this.margin.bottom + "px"), 
        this.container.append("div").attr("class", "hoverbox");
    },
    cleanData: function(t) {
        var i = this.options.y;
        this.options.x;
        for (var e = 0; e < t.length; e++) {
            var o = t[e];
            null != o[i] && "string" == typeof o[i] && (o[i] = +o[i].replace(",", ""));
        }
        return t;
    },
    update: function(t) {
        var i = this, e = this.options.y, o = this.options.x;
        this.data = t = this.cleanData(t), this.color = d3.scale.ordinal().range(this.options.barColors), 
        this.x.domain(t.map(function(t) {
            return t[o];
        })), this.y.domain([ 0, d3.max(t, function(t) {
            return t[e];
        }) ]);
        var s = this.container.select(".bars").selectAll(".bar").data(t);
        if (s.transition().attr("geodash-id", function(t) {
            return t[o];
        }).style("left", function(t) {
            return i.x(t[o]) + "px";
        }).style("width", i.x.rangeBand() + "px").style("bottom", function() {
            return 0;
        }).style("height", function(t) {
            return i.height - i.y(t[e]) + "px";
        }).style("opacity", function(t) {
            return t[o] == i.options.highlight ? 1 : i.options.opacity;
        }).style("background-color", function(t) {
            return i.color(t[o]);
        }), s.enter().append("div").attr("class", "bar").attr("geodash-id", function(t) {
            return t[o];
        }).style("left", function(t) {
            return i.x(t[o]) + "px";
        }).style("width", i.x.rangeBand() + "px").style("bottom", function() {
            return 0;
        }).style("height", function(t) {
            return i.height - i.margin.bottom - i.y(t[e]) + "px";
        }).style("opacity", function(t) {
            return t[o] == i.options.highlight ? 1 : i.options.opacity;
        }).style("background-color", function(t) {
            return i.color(t[o]);
        }).style("border-top-right-radius", function() {
            return i.options.roundRadius + "px";
        }).style("border-top-left-radius", function() {
            return i.options.roundRadius + "px";
        }).on("mouseover", function(t) {
            console.log(t), d3.select(this).style("opacity", 1);
            var s = t[o] + ": ";
            s += i.options.percent ? i.formatPercent(t[e]) : i.formatComma(t[e]), i.container.select(".hoverbox").html(s), 
            i.container.select(".hoverbox").transition().style("display", "block");
        }).on("mouseout", function(t) {
            var e = i.options.opacity;
            t[o] == i.options.highlight && (e = 1), d3.select(this).style("opacity", e), i.container.select(".hoverbox").transition().style("display", "none");
        }), s.exit().remove(), this.options.drawY) {
            var n = this.y.ticks(), a = this.yAxisElement.selectAll(".tick").data(n);
            a.transition().style("top", function(t) {
                return i.y(t) + "px";
            });
            var r = a.enter().append("div").attr("class", "tick").style("top", function(t) {
                return i.y(t) + "px";
            }).style("width", "100%");
            a.exit().remove(), r.append("div").attr("class", "line").style("width", "100%"), 
            r.append("div").attr("class", "gd-label").text(function(t) {
                var e = i.formatLarge(t);
                return i.options.money && (e = "$" + e), i.options.percent && (e += "%"), e;
            }).style("margin-top", function() {
                var t = d3.select(this).style("height"), i = -1 * (parseInt(t) / 2);
                return i + "px";
            });
        }
        if (this.options.drawX) {
            var l = this.x.domain(), a = this.xAxisElement.selectAll(".gd-label").data(l);
            a.transition().style("left", function(t) {
                return i.x(t) + "px";
            }).style("width", i.x.rangeBand() + "px");
            var r = a.enter().append("div").attr("class", "tick").style("left", function(t) {
                return i.x(t) + "px";
            }).style("width", i.x.rangeBand() + "px").style("bottom", function() {
                return "0px";
            }).style("height", i.margin.bottom + "px");
            a.exit().remove(), r.append("div").attr("class", "line").style("margin-left", function() {
                var t = i.x.rangeBand() / 2;
                return console.log(t), t + "px";
            }), r.append("div").attr("class", "gd-label").text(function(t) {
                return t;
            });
        }
    },
    setColor: function(t) {
        this.options.barColors = t;
    }
});