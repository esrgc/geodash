var _ezoop = window.ezoop, ezoop = function() {};

ezoop.noConflict = function() {
    return window.ezoop = _ezoop, this;
}, window.ezoop = ezoop, ezoop.ExtendedClass = function(t, e) {
    return ezoop.Class(t, e);
}, ezoop.BaseClass = function(t) {
    return ezoop.Class(null, t);
}, ezoop.Class = function(t, e) {
    var i = null, n = ezoop.Class;
    return null == t || "undefined" == typeof t ? (i = function() {
        "undefined" != typeof this.initialize && this.initialize.apply(this, arguments);
    }, i.prototype = e) : (i = function() {
        if ("undefined" != typeof t.prototype) {
            var e = t.prototype.initialize;
            "function" == typeof e && e.apply(this, arguments);
        }
        var i = "function" == typeof this.initialize ? this.initialize : "undefined";
        "function" == typeof i && i.apply(this, arguments);
    }, n.inheritPrototype(i, t), n.augmentPrototype(i.prototype, e)), i;
}, ezoop.Class.inheritPrototype = function(t, e) {
    var i = function() {};
    i.prototype = e.prototype, t.prototype = new i(), t.prototype.constructor = t, t.parent = e.prototype;
}, ezoop.Class.augmentPrototype = function(t, e) {
    if (t = t || {}, e) {
        for (var i in e) {
            var n = e[i];
            void 0 !== n && (t[i] = n);
        }
        var o = "function" == typeof window.Event && e instanceof window.Event;
        !o && e.hasOwnProperty && e.hasOwnProperty("toString") && (t.toString = e.toString);
    }
}, function(t, e) {
    if ("object" == typeof exports && exports) e(exports); else {
        var i = {};
        e(i), "function" == typeof define && define.amd ? define(i) : t.Mustache = i;
    }
}(this, function(t) {
    function e(t, e) {
        return c.call(t, e);
    }
    function i(t) {
        return !e(f, t);
    }
    function n(t) {
        return "function" == typeof t;
    }
    function o(t) {
        return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    }
    function s(t) {
        return String(t).replace(/[&<>"'\/]/g, function(t) {
            return y[t];
        });
    }
    function a(t) {
        if (!x(t) || 2 !== t.length) throw new Error("Invalid tags: " + t);
        return [ new RegExp(o(t[0]) + "\\s*"), new RegExp("\\s*" + o(t[1])) ];
    }
    function r(e, n) {
        function s() {
            if (P && !z) for (;A.length; ) delete C[A.pop()]; else A = [];
            P = !1, z = !1;
        }
        n = n || t.tags, e = e || "", "string" == typeof n && (n = n.split(m));
        for (var r, d, u, c, f, g, x = a(n), y = new p(e), k = [], C = [], A = [], P = !1, z = !1; !y.eos(); ) {
            if (r = y.pos, u = y.scanUntil(x[0])) for (var R = 0, E = u.length; E > R; ++R) c = u.charAt(R), 
            i(c) ? A.push(C.length) : z = !0, C.push([ "text", c, r, r + 1 ]), r += 1, "\n" === c && s();
            if (!y.scan(x[0])) break;
            if (P = !0, d = y.scan(L) || "name", y.scan(v), "=" === d ? (u = y.scanUntil(b), 
            y.scan(b), y.scanUntil(x[1])) : "{" === d ? (u = y.scanUntil(new RegExp("\\s*" + o("}" + n[1]))), 
            y.scan(w), y.scanUntil(x[1]), d = "&") : u = y.scanUntil(x[1]), !y.scan(x[1])) throw new Error("Unclosed tag at " + y.pos);
            if (f = [ d, u, r, y.pos ], C.push(f), "#" === d || "^" === d) k.push(f); else if ("/" === d) {
                if (g = k.pop(), !g) throw new Error('Unopened section "' + u + '" at ' + r);
                if (g[1] !== u) throw new Error('Unclosed section "' + g[1] + '" at ' + r);
            } else "name" === d || "{" === d || "&" === d ? z = !0 : "=" === d && (x = a(n = u.split(m)));
        }
        if (g = k.pop()) throw new Error('Unclosed section "' + g[1] + '" at ' + y.pos);
        return h(l(C));
    }
    function l(t) {
        for (var e, i, n = [], o = 0, s = t.length; s > o; ++o) e = t[o], e && ("text" === e[0] && i && "text" === i[0] ? (i[1] += e[1], 
        i[3] = e[3]) : (n.push(e), i = e));
        return n;
    }
    function h(t) {
        for (var e, i, n = [], o = n, s = [], a = 0, r = t.length; r > a; ++a) switch (e = t[a], 
        e[0]) {
          case "#":
          case "^":
            o.push(e), s.push(e), o = e[4] = [];
            break;

          case "/":
            i = s.pop(), i[5] = e[2], o = s.length > 0 ? s[s.length - 1][4] : n;
            break;

          default:
            o.push(e);
        }
        return n;
    }
    function p(t) {
        this.string = t, this.tail = t, this.pos = 0;
    }
    function d(t, e) {
        this.view = null == t ? {} : t, this.cache = {
            ".": this.view
        }, this.parent = e;
    }
    function u() {
        this.cache = {};
    }
    var c = RegExp.prototype.test, f = /\S/, g = Object.prototype.toString, x = Array.isArray || function(t) {
        return "[object Array]" === g.call(t);
    }, y = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
        "/": "&#x2F;"
    }, v = /\s*/, m = /\s+/, b = /\s*=/, w = /\s*\}/, L = /#|\^|\/|>|\{|&|=|!/;
    p.prototype.eos = function() {
        return "" === this.tail;
    }, p.prototype.scan = function(t) {
        var e = this.tail.match(t);
        if (e && 0 === e.index) {
            var i = e[0];
            return this.tail = this.tail.substring(i.length), this.pos += i.length, i;
        }
        return "";
    }, p.prototype.scanUntil = function(t) {
        var e, i = this.tail.search(t);
        switch (i) {
          case -1:
            e = this.tail, this.tail = "";
            break;

          case 0:
            e = "";
            break;

          default:
            e = this.tail.substring(0, i), this.tail = this.tail.substring(i);
        }
        return this.pos += e.length, e;
    }, d.prototype.push = function(t) {
        return new d(t, this);
    }, d.prototype.lookup = function(t) {
        var e;
        if (t in this.cache) e = this.cache[t]; else {
            for (var i = this; i; ) {
                if (t.indexOf(".") > 0) {
                    e = i.view;
                    for (var o = t.split("."), s = 0; null != e && s < o.length; ) e = e[o[s++]];
                } else e = i.view[t];
                if (null != e) break;
                i = i.parent;
            }
            this.cache[t] = e;
        }
        return n(e) && (e = e.call(this.view)), e;
    }, u.prototype.clearCache = function() {
        this.cache = {};
    }, u.prototype.parse = function(t, e) {
        var i = this.cache, n = i[t];
        return null == n && (n = i[t] = r(t, e)), n;
    }, u.prototype.render = function(t, e, i) {
        var n = this.parse(t), o = e instanceof d ? e : new d(e);
        return this.renderTokens(n, o, i, t);
    }, u.prototype.renderTokens = function(e, i, o, s) {
        function a(t) {
            return p.render(t, i, o);
        }
        for (var r, l, h = "", p = this, d = 0, u = e.length; u > d; ++d) switch (r = e[d], 
        r[0]) {
          case "#":
            if (l = i.lookup(r[1]), !l) continue;
            if (x(l)) for (var c = 0, f = l.length; f > c; ++c) h += this.renderTokens(r[4], i.push(l[c]), o, s); else if ("object" == typeof l || "string" == typeof l) h += this.renderTokens(r[4], i.push(l), o, s); else if (n(l)) {
                if ("string" != typeof s) throw new Error("Cannot use higher-order sections without the original template");
                l = l.call(i.view, s.slice(r[3], r[5]), a), null != l && (h += l);
            } else h += this.renderTokens(r[4], i, o, s);
            break;

          case "^":
            l = i.lookup(r[1]), (!l || x(l) && 0 === l.length) && (h += this.renderTokens(r[4], i, o, s));
            break;

          case ">":
            if (!o) continue;
            l = n(o) ? o(r[1]) : o[r[1]], null != l && (h += this.renderTokens(this.parse(l), i, o, l));
            break;

          case "&":
            l = i.lookup(r[1]), null != l && (h += l);
            break;

          case "name":
            l = i.lookup(r[1]), null != l && (h += t.escape(l));
            break;

          case "text":
            h += r[1];
        }
        return h;
    }, t.name = "mustache.js", t.version = "0.8.1", t.tags = [ "{{", "}}" ];
    var k = new u();
    t.clearCache = function() {
        return k.clearCache();
    }, t.parse = function(t, e) {
        return k.parse(t, e);
    }, t.render = function(t, e, i) {
        return k.render(t, e, i);
    }, t.to_html = function(e, i, o, s) {
        var a = t.render(e, i, o);
        return n(s) ? (s(a), void 0) : a;
    }, t.escape = s, t.Scanner = p, t.Context = d, t.Writer = u;
});

var oldGeoDash = window.GeoDash, GeoDash = function() {};

GeoDash.version = "0.1-dev", GeoDash.noConflict = function() {
    return window.GeoDash = oldGeoDash, this;
}, window.GeoDash = GeoDash, GeoDash.Chart = ezoop.BaseClass({
    className: "Chart",
    defaults: {},
    initialize: function(t, e) {
        this.el = t, this.options = {}, this.setOptions(e), this.makeTitle(), this.setUpChart(), 
        this.drawChart();
    },
    setOptions: function(t) {
        for (var e in this.defaults) this.defaults.hasOwnProperty(e) && void 0 === t[e] && (t[e] = this.defaults[e]);
        this.options = t;
    },
    setUpChart: function() {
        d3.select(this.el).style("position", "relative");
    },
    drawChart: function() {
        var t = this;
        if (this.margin = {
            top: 10,
            right: 10,
            bottom: 10,
            left: 10
        }, this.setWidth(), this.setHeight(), this.setXAxis(), this.setYAxis(), this.formatPercent = d3.format(".0%"), 
        this.formatLarge = d3.format("s"), this.formatComma = d3.format(","), this.formatPercentAxisLabel = d3.format("p"), 
        this.formatMoney = d3.format("$"), this.container = d3.select(this.el).append("div").attr("class", function() {
            return "geodash " + t.options.class;
        }).style("width", this.width + "px").style("height", this.height + "px").style("margin-top", this.margin.top + "px").style("margin-bottom", this.margin.bottom + "px").style("margin-left", t.margin.left + "px").style("margin-right", this.margin.right + "px"), 
        this.xAxisElement = this.container.append("div").attr("class", "x axis").style("margin-left", function() {
            return t.width - t.xrange + "px";
        }).style("width", function() {
            return t.xrange + "px";
        }), t.options.xLabel && this.xAxisElement.append("div").attr("class", "xAxisLabel").style("height", this.options.axisLabelPadding + "px").append("div").attr("class", "gd-label").style("line-height", this.options.axisLabelPadding + "px").text(this.options.xLabel), 
        this.yAxisElement = this.container.append("div").attr("class", "y axis"), t.options.yLabel && this.yAxisElement.append("div").attr("class", "yAxisLabel").style("height", this.options.axisLabelPadding + "px").style("left", -1 * this.options.axisLabelPadding + "px").append("div").attr("class", "gd-label").style("line-height", this.options.axisLabelPadding + "px").text(this.options.yLabel), 
        this.container.append("div").attr("class", "bars").style("height", function() {
            return t.yrange + "px";
        }).style("width", function() {
            return t.xrange + "px";
        }).style("margin-left", function() {
            return t.width - t.xrange + "px";
        }), "LineChart" === this.className && (this.svg = this.container.select(".bars").append("svg")), 
        "PieChart" === this.className) {
            var e = this.width;
            this.options.legend && (e -= this.options.legendWidth, this.container.select(".bars").style("width", this.width - this.options.legendWidth + "px"), 
            this.container.append("div").attr("class", "legend").style("width", this.options.legendWidth + "px")), 
            this.svg = this.container.select(".bars").append("svg").append("g").attr("transform", "translate(" + e / 2 + "," + this.height / 2 + ")");
        }
        this.container.append("div").attr("class", "hoverbox");
    },
    updateChart: function() {},
    setXAxis: function() {
        var t = this.width;
        this.options.yLabel && (t -= this.options.axisLabelPadding), this.options.drawY && (t -= this.options.yaxisLabelPadding), 
        this.xrange = t, this.x = d3.scale.ordinal().rangeRoundBands([ 0, t ], .05, this.options.outerPadding);
    },
    setYAxis: function() {
        var t = this.height;
        this.options.xLabel && (t -= this.options.axisLabelPadding), this.options.drawX && (t -= this.options.axisLabelPadding), 
        this.yrange = t, this.y = d3.scale.linear().range([ t, 0 ]);
    },
    updateYAxis: function() {
        var t = this;
        if (this.options.drawY) {
            var e = this.y.ticks(), i = this.yAxisElement.selectAll(".tick").data(e), e = i.transition().style("top", function(e) {
                return t.y(e) + "px";
            });
            e.select(".gd-label").text(function(e) {
                var i = t.formatLarge(e);
                return t.options.money && (i = "$" + i), t.options.percent && (i += "%"), i;
            });
            var n = i.enter().append("div").attr("class", "tick").style("top", function(e) {
                return t.y(e) + "px";
            }).style("left", function() {
                return t.options.yLabel ? t.options.axisLabelPadding + "px" : void 0;
            }).style("width", function() {
                return t.options.yLabel ? t.width - t.options.axisLabelPadding + "px" : t.width + "px";
            });
            i.exit().remove(), n.append("div").attr("class", "line").style("width", "100%"), 
            n.append("div").attr("class", "gd-label").text(function(e) {
                var i = t.formatLarge(e);
                return t.options.money && (i = "$" + i), t.options.percent && (i += "%"), i;
            }).style("margin-top", function() {
                var t = d3.select(this).style("height"), e = -1 * (parseInt(t) / 2);
                return e + "px";
            }).style("width", t.options.yaxisLabelPadding + "px");
        }
    },
    updateXAxis: function() {
        var t = this;
        if (this.options.drawX) {
            var e = this.x.domain(), i = this.xAxisElement.selectAll(".tick").data(e), n = i.transition().style("left", function(e) {
                return t.x(e) + "px";
            }).style("width", t.x.rangeBand() + "px");
            n.select(".line").style("margin-left", function() {
                var e = t.x.rangeBand() / 2;
                return e + "px";
            }), n.select(".gd-label").text(function(e) {
                return t.options.xFormat ? t.options.xFormat(e) : e;
            });
            var o = i.enter().append("div").attr("class", "tick").style("left", function(e) {
                return t.x(e) + "px";
            }).style("width", t.x.rangeBand() + "px").style("bottom", function() {
                var e = t.height - t.yrange - t.options.axisLabelPadding;
                return e + "px";
            }).style("height", t.options.axisLabelPadding + "px");
            i.exit().remove(), o.append("div").attr("class", "line").style("margin-left", function() {
                var e = t.x.rangeBand() / 2;
                return e + "px";
            }), o.append("div").attr("class", "gd-label").text(function(e) {
                return t.options.xFormat ? t.options.xFormat(e) : e;
            });
        }
    },
    update: function() {},
    makeTitle: function() {
        if (this.options.title) {
            var t = '<div class="geodash-title">' + this.options.title + "</div>";
            d3.select(this.el).html(t);
        }
    },
    getData: function() {
        return this.data;
    },
    setWidth: function() {
        this.width = parseInt(d3.select(this.el).style("width")), this.width = this.width - this.margin.left - this.margin.right;
    },
    setHeight: function() {
        0 !== this.options.barHeight && "undefined" != typeof this.options.barHeight && d3.select(this.el).style("height", "auto"), 
        this.height = parseInt(d3.select(this.el).style("height")), this.height = this.height - this.margin.top - this.margin.bottom, 
        this.options.title && (this.height = this.height - 30);
    },
    setYAxisLabel: function(t) {
        this.container.select(".y.axis .yAxisLabel .gd-label").text(t);
    },
    setXAxisLabel: function(t) {
        this.container.select(".y.axis .xAxisLabel .gd-label").text(t);
    }
}), GeoDash.TableChart = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "TableChart",
    defaults: {
        highlight: [],
        format: !1
    },
    initialize: function() {},
    drawChart: function() {
        this.margin = {
            top: 20,
            right: 10,
            bottom: 20,
            left: 40
        }, this.width = ("auto" === this.options.width || void 0 === this.options.width ? parseInt(d3.select(this.el).style("width")) : this.options.width) - this.margin.left - this.margin.right, 
        this.height = ("auto" === this.options.height || void 0 === this.options.height ? parseInt(d3.select(this.el).style("height")) : this.options.height) - this.margin.top - this.margin.bottom, 
        this.options.title && (this.height = this.height - 30), this.formatPercent = d3.format(".2%"), 
        this.formatPercentAxisLabel = d3.format(".0%"), this.formatLarge = d3.format("s"), 
        this.formatComma = d3.format(",.2f"), this.table = d3.select(this.el).append("table").attr("width", this.width + this.margin.left + this.margin.right).attr("class", "table table-condensed table-bordered gd-table"), 
        this.tbody = this.table.append("tbody");
    },
    update: function(t) {
        var e = this, i = this.tbody.selectAll("tr").data(t).attr("style", function(t) {
            for (var i = t[e.options.columns[0]], n = 0; n < e.options.highlight.length; n++) if (e.options.highlight[n] == i) return "background:" + e.options.color;
            return "";
        });
        i.enter().append("tr").attr("style", function(t) {
            for (var i = t[e.options.columns[0]], n = 0; n < e.options.highlight.length; n++) if (e.options.highlight[n] == i) return "background:" + e.options.color;
            return "";
        }), i.exit().remove();
        var n = i.selectAll("td").data(function(t) {
            return e.options.columns.map(function(e) {
                return {
                    column: e,
                    value: t[e]
                };
            });
        });
        return n.transition().text(function(t) {
            return e.format(t);
        }), n.enter().append("td").text(function(t) {
            return e.format(t);
        }), n.exit().remove(), this;
    },
    format: function(t) {
        var e = "", i = this;
        if (null === t.value) return e = "NA";
        if (isNaN(parseFloat(t.value))) e = t.value; else {
            if (i.options.format) {
                var n = d3.format(",." + i.options.format.precision + "f");
                e = n(t.value);
            } else e = i.formatComma(t.value);
            i.options.money && (e = "$" + e), i.options.percent && (e += "%");
        }
        return e;
    }
}), GeoDash.LineChart = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "LineChart",
    defaults: {
        x: "x",
        y: "y",
        width: "auto",
        height: "auto",
        colors: [ "#d80000", "#006200" ],
        interpolate: "monotone",
        dotRadius: 3,
        title: !1,
        opacity: .5,
        strokeWidth: 2,
        drawX: !0,
        drawY: !0,
        xLabel: !1,
        yLabel: !1,
        xInterval: "auto",
        dashed: !1,
        time: !0,
        axisLabelPadding: 20,
        yaxisLabelPadding: 25,
        "class": "chart-html linechart vertical",
        xFormat: d3.time.format("%Y-%m-%d"),
        hoverTemplate: "{{x}}: {{y}}",
        formatter: d3.format(","),
        outerPadding: 0
    },
    initialize: function() {},
    update: function(t) {
        var e = this;
        if (this.data = t, this.color = d3.scale.ordinal().range(this.options.colors), this.color.domain(d3.keys(t[0]).filter(function(t) {
            return t !== e.options.x;
        })), this.linedata = this.color.domain().map(function(i) {
            return {
                name: i,
                values: t.map(function(t) {
                    var n, o = t[e.options.x];
                    return n = null === t[i] ? null : +t[i], {
                        date: o,
                        value: n
                    };
                })
            };
        }), this.options.dashed) {
            var i = [];
            this.options.dashed.forEach(function(t) {
                var n = e.linedata[t.line];
                if ("undefined" != typeof n) {
                    var o = {};
                    o.name = JSON.parse(JSON.stringify(n.name)), o.values = [], o.dashed = !0, t.span.forEach(function(t) {
                        for (var e = t.start; e <= t.end; e++) o.values.push({
                            date: n.values[e].date,
                            value: JSON.parse(JSON.stringify(n.values[e].value))
                        }), e !== t.end && (n.values[e].value = null);
                    }), i.push(o);
                }
            }), i.forEach(function(t) {
                e.linedata.push(t);
            });
        }
        for (var n = 0; n < this.linedata.length; n++) {
            for (var o = [], s = 0; s < this.linedata[n].values.length; s++) {
                var a = this.linedata[n].values[s].value;
                isNaN(a) || null === a || o.push(this.linedata[n].values[s]);
            }
            this.linedata[n].values = o;
        }
        this.xLine = this.options.time ? d3.time.scale().range([ 0, this.xrange ]) : d3.scale.linear().range([ 0, this.xrange ]), 
        this.xLine.domain(d3.extent(this.data, function(t) {
            return t[e.options.x];
        })), "auto" == e.options.xInterval ? this.xLine.ticks(t.length) : this.xLine.ticks(e.options.xInterval), 
        this.x.domain(this.xLine.ticks()), this.y.domain([ d3.min(this.linedata, function(t) {
            return d3.min(t.values, function(t) {
                return t.value;
            });
        }), d3.max(this.linedata, function(t) {
            return d3.max(t.values, function(t) {
                return t.value;
            });
        }) ]);
        var r = this.y.domain();
        this.y.domain([ r[0] - .1 * r[0], r[1] + .1 * r[1] ]), this.updateChart(), this.updateXAxis(), 
        this.updateYAxis();
    },
    updateChart: function() {
        var t = this;
        this.line = d3.svg.line().interpolate(this.options.interpolate).x(function(e) {
            return t.x(e.date) + t.x.rangeBand() / 2;
        }).y(function(e) {
            return t.y(e.value);
        });
        var e = function(t, e) {
            return 10 * e;
        }, i = this.svg.selectAll(".line_group").data(this.linedata), n = this.svg.selectAll(".line").data(this.linedata);
        n.transition().style("stroke", function(e) {
            return t.color(e.name);
        }).style("stroke-dasharray", function(t) {
            return t.dashed ? "5, 5" : "none";
        }).attr("d", function(e) {
            return t.line(e.values);
        }), n.enter().append("g").attr("class", function(t, e) {
            return "line_group line_group" + e;
        }).append("path").attr("class", "line").attr("d", function(e) {
            return t.line(e.values);
        }).style("stroke", function(e) {
            return t.color(e.name);
        }).style("stroke-width", t.options.strokeWidth).style("stroke-dasharray", function(t) {
            return t.dashed ? "5, 5" : "none";
        }).style("stroke-opacity", t.options.opacity), n.exit().selectAll(".dot"), n.exit().remove(), 
        i.exit().remove();
        for (var o = 0; o < this.linedata.length; o++) {
            var s = this.linedata[o].values, a = this.svg.select(".line_group" + o).selectAll(".dot").data(s);
            a.transition().duration(500).delay(e).attr("data", function(t) {
                return t.value;
            }).style("fill", function() {
                return t.color(t.linedata[o].name);
            }).attr("cx", function(e) {
                return t.x(e.date) + t.x.rangeBand() / 2;
            }).attr("cy", function(e) {
                return t.y(e.value);
            }), a.enter().append("circle").attr("class", "dot").attr("r", this.options.dotRadius).style("fill", function() {
                return t.color(t.linedata[o].name);
            }).style("fill-opacity", t.options.opacity).attr("data", function(t) {
                return t.value;
            }).on("mouseover", function(e, i) {
                t.mouseOver(e, i, this);
            }).on("mouseout", function(e, i) {
                t.mouseOut(e, i, this);
            }).attr("cx", function(e) {
                return t.x(e.date) + t.x.rangeBand() / 2;
            }).attr("cy", function(e) {
                return t.y(e.value);
            }), a.exit().remove();
        }
    },
    mouseOver: function(t, e, i) {
        var n = this, o = t.value, s = t.date, a = "";
        if (n.options.xFormat && (s = n.options.xFormat(s)), null !== o) {
            o = n.options.formatter(o);
            var r = {
                y: o,
                x: s
            };
            a = Mustache.render(n.options.hoverTemplate, r);
        } else a = "NA";
        d3.select(i).transition().attr("r", this.options.dotRadius + 3), d3.select(i).style("fill-opacity", .9), 
        n.container.select(".hoverbox").html(a), n.container.select(".hoverbox").transition().style("display", "block");
    },
    mouseOut: function(t, e, i) {
        var n = this;
        d3.select(i).style("fill-opacity", n.options.opacity), d3.select(i).transition().attr("r", this.options.dotRadius), 
        n.container.select(".hoverbox").transition().style("display", "none");
    }
}), GeoDash.PieChart = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "PieChart",
    defaults: {
        label: "label",
        value: "value",
        colors: [ "#f00", "#0f0", "#00f" ],
        innerRadius: 10,
        opacity: 1,
        drawX: !1,
        drawY: !1,
        title: !1,
        padding: 10,
        legend: !1,
        hover: !0,
        arclabels: !1,
        "class": "chart-html piechart-svg",
        formatter: d3.format(",.0f"),
        formatPercent: d3.format(".2f"),
        hoverTemplate: "{{label}}: {{value}} ({{percent}}%)",
        labelColor: "#ccc",
        legendWidth: 80,
        arcstroke: 2
    },
    initialize: function() {},
    setColors: function(t) {
        this.color = d3.scale.ordinal().range(t);
    },
    update: function(t) {
        var e = this, i = Math.min(this.width, this.height);
        this.options.legend && (i -= this.options.legendWidth);
        var n = i / 2;
        this.arc = d3.svg.arc().outerRadius(n).innerRadius(this.options.innerRadius), this.pie = d3.layout.pie().sort(null).value(function(t) {
            return t[e.options.value];
        }), this.color = d3.scale.ordinal().range(this.options.colors), this.total = 0, 
        t.forEach(function(i, n) {
            i[e.options.value] = +i[e.options.value], +i[e.options.value] < 0 ? t.splice(n, 1) : e.total += +i[e.options.value];
        });
        var o = this.svg.selectAll("path").data(this.pie(t));
        if (o.style("fill", function(t) {
            return e.color(t.data[e.options.label]);
        }).attr("d", this.arc), o.enter().append("path").attr("class", "arc").attr("d", this.arc).style("fill", function(t) {
            return e.color(t.data[e.options.label]);
        }).style("fill-opacity", this.options.opacity).style("stroke-width", this.options.arcstroke).on("mouseover", function(t) {
            if (d3.select(this).style("fill-opacity", 1), e.options.hover) {
                var i = t.data[e.options.label], n = e.options.formatter(t.value), o = e.options.formatPercent(100 * (t.value / e.total)), s = {
                    label: i,
                    value: n,
                    percent: o
                };
                output = Mustache.render(e.options.hoverTemplate, s), e.container.select(".hoverbox").html(output), 
                e.container.select(".hoverbox").style("display", "block");
            }
        }).on("mouseout", function() {
            e.container.select(".hoverbox").html(""), e.container.select(".hoverbox").style("display", "none"), 
            d3.select(this).style("fill-opacity", e.options.opacity);
        }), o.exit().remove(), this.options.arclabels) {
            var s = e.svg.selectAll(".arc-text").data(this.pie(t));
            s.select("text").attr("transform", function(t) {
                return "translate(" + e.arc.centroid(t) + ")";
            }).text(function(t) {
                return t.data[e.options.label] + " (" + t.value + ")";
            }), s.enter().append("g").attr("class", "arc-text").append("text").attr("transform", function(t) {
                return "translate(" + e.arc.centroid(t) + ")";
            }).attr("dy", ".35em").style("text-anchor", "middle").style("fill", e.options.labelColor).text(function(t) {
                return t.data[e.options.label] + " (" + t.value + ")";
            }), s.exit().remove();
        }
        if (this.options.legend) {
            var a = {
                width: 10,
                height: 10,
                padding: 5
            }, r = 3, l = this.container.select(".legend"), h = l.selectAll(".legend-item").data(this.color.domain().slice()), s = h.select(".value").text(function(t) {
                return t;
            }), p = h.enter().append("div").attr("class", "legend-item");
            p.append("div").attr("class", "swatch").style("float", "left").style("width", a.width + "px").style("height", a.height + "px").style("background", this.color), 
            p.append("div").attr("class", "value").style("width", this.options.legendWidth - a.width - r + "px").style("padding-left", r + "px").text(function(t) {
                return t;
            }), h.exit().remove();
            var d = parseInt(l.style("height")), u = this.height / 2 - d / 2;
            l.style("top", u + "px");
        }
    }
}), GeoDash.BarChartHorizontal = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "BarChartHorizontal",
    defaults: {
        x: "x",
        y: "y",
        barColors: [ "#f00" ],
        opacity: .7,
        drawX: !1,
        drawY: !1,
        percent: !1,
        money: !1,
        title: !1,
        roundRadius: 3,
        highlight: [],
        invert: !1,
        barHeight: 0,
        padding: 2,
        numberTicks: 10,
        yWidth: 0,
        round: !0,
        format: !1,
        topPadding: 10,
        axisLabelPadding: 20,
        rightBarPadding: 10,
        outerPadding: .5,
        "class": "chart-html horizontal",
        hoverTemplate: "{{y}}: {{x}}",
        formatter: d3.format(",")
    },
    initialize: function() {},
    setXAxis: function() {
        var t = this.width;
        this.options.drawY && (t -= this.options.yWidth), this.options.yLabel && (t -= this.options.axisLabelPadding), 
        this.xrange = t, this.x = d3.scale.linear().range([ 0, t - this.options.rightBarPadding ]).nice();
    },
    setYAxis: function() {
        var t = this.height;
        this.options.drawX && (t -= this.options.axisLabelPadding), this.options.xLabel && (t -= this.options.axisLabelPadding), 
        this.yrange = t, this.y = d3.scale.ordinal().rangeRoundBands([ t, 0 ], .05, this.options.outerPadding);
    },
    update: function(t) {
        if (0 !== this.options.barHeight) {
            var e = this.options.barHeight * t.length + this.options.padding * t.length + 2 * this.options.topPadding;
            this.options.drawX && (e += this.options.axisLabelPadding), this.options.xLabel && (e += this.options.axisLabelPadding), 
            this.container.select(".bars").style("height", e + "px"), this.setHeight(), this.setYAxis();
        }
        for (var i = this.options.y, n = this.options.x, o = 0; o < t.length; o++) {
            var s = t[o];
            null != s[n] && "string" == typeof s[n] && (s[n] = +s[n].replace(",", ""));
        }
        this.data = t, this.color = d3.scale.ordinal().range(this.options.barColors);
        var a = d3.extent(t, function(t) {
            return t[n];
        });
        a[0] < 0 ? this.x.domain(a) : this.x.domain([ 0, a[1] ]), this.y.domain(t.map(function(t) {
            return t[i];
        })), this.updateChart(), this.updateXAxis(), this.updateYAxis();
    },
    updateChart: function() {
        var t = this, e = this.options.y, i = this.options.x, n = this.container.select(".bars").selectAll(".bar").data(this.data);
        n.transition().attr("geodash-id", function(t) {
            return t[e];
        }).style("left", function(e) {
            var n = t.x(Math.min(0, e[i]));
            return n === t.x(0) && (n += 1), n + "px";
        }).style("top", function(i, n) {
            var o = 0;
            return o = 0 !== t.options.barHeight ? t.options.barHeight * n + t.options.padding * n + t.options.topPadding : t.y(i[e]), 
            o + "px";
        }).style("width", function(e) {
            var n = Math.abs(t.x(e[i]) - t.x(0));
            return n + "px";
        }).style("height", function() {
            return 0 !== t.options.barHeight ? t.options.barHeight + "px" : t.y.rangeBand() + "px";
        }).style("opacity", function(i) {
            for (var n = 0; n < t.options.highlight.length; n++) if (t.options.highlight[n] == i[e]) return 1;
            return t.options.opacity;
        }).style("border-top-right-radius", function(e) {
            var n = 0, o = t.x(Math.min(0, e[i]));
            return o >= t.x(0) && (n = t.options.roundRadius), n + "px";
        }).style("border-bottom-right-radius", function(e) {
            var n = 0, o = t.x(Math.min(0, e[i]));
            return o >= t.x(0) && (n = t.options.roundRadius), n + "px";
        }).style("border-top-left-radius", function(e) {
            var n = 0, o = t.x(Math.min(0, e[i]));
            return o < t.x(0) && (n = t.options.roundRadius), n + "px";
        }).style("border-bottom-left-radius", function(e) {
            var n = 0, o = t.x(Math.min(0, e[i]));
            return o < t.x(0) && (n = t.options.roundRadius), n + "px";
        }).style("background-color", function(i) {
            return t.color(i[e]);
        }, "important");
        var o = n.enter().append("div").attr("class", "bar").attr("geodash-id", function(t) {
            return t[e];
        }).style("left", function(e) {
            var n = t.x(Math.min(0, e[i]));
            return n === t.x(0) && (n += 1), n + "px";
        }).style("top", function(i, n) {
            var o = 0;
            return o = 0 !== t.options.barHeight ? t.options.barHeight * n + t.options.padding * n + t.options.topPadding : t.y(i[e]), 
            o + "px";
        }).style("width", function(e) {
            var n = Math.abs(t.x(e[i]) - t.x(0));
            return n + "px";
        }).style("height", function() {
            return 0 !== t.options.barHeight ? t.options.barHeight + "px" : t.y.rangeBand() + "px";
        }).style("opacity", function(i) {
            for (var n = 0; n < t.options.highlight.length; n++) if (t.options.highlight[n] == i[e]) return 1;
            return t.options.opacity;
        }).style("border-top-right-radius", function(e) {
            var n = 0, o = t.x(Math.min(0, e[i]));
            return o >= t.x(0) && (n = t.options.roundRadius), n + "px";
        }).style("border-bottom-right-radius", function(e) {
            var n = 0, o = t.x(Math.min(0, e[i]));
            return o >= t.x(0) && (n = t.options.roundRadius), n + "px";
        }).style("border-top-left-radius", function(e) {
            var n = 0, o = t.x(Math.min(0, e[i]));
            return o < t.x(0) && (n = t.options.roundRadius), n + "px";
        }).style("border-bottom-left-radius", function(e) {
            var n = 0, o = t.x(Math.min(0, e[i]));
            return o < t.x(0) && (n = t.options.roundRadius), n + "px";
        }).style("-webkit-print-color-adjust", "exact").style("background-color", function(i) {
            return t.color(i[e]);
        }, "important");
        n.exit().remove(), o.on("mouseover", function(e, i) {
            t.mouseOver(e, i);
        }).on("mouseout", function(e, i) {
            t.mouseOut(e, i);
        });
    },
    updateXAxis: function() {
        var t = this;
        if (this.options.y, this.options.x, this.options.drawX) {
            this.container.select(".bars").style("height");
            var e = this.x.ticks(t.options.numberTicks), i = this.xAxisElement.selectAll(".tick").data(e), e = i.transition().style("left", function(e) {
                var i = t.x(e);
                return i + "px";
            }).style("height", function() {
                return t.options.xLabel ? t.height - t.options.axisLabelPadding + "px" : t.height + "px";
            });
            e.select(".gd-label").text(function(e) {
                var i = t.formatLarge(e);
                return t.options.money && (i = "$" + i), t.options.percent && (i += "%"), i;
            });
            var n = i.enter().append("div").attr("class", "tick").style("left", function(e) {
                var i = t.x(e);
                return i + "px";
            }).style("bottom", function() {
                return t.options.yLabel ? t.options.axisLabelPadding + "px" : void 0;
            }).style("height", function() {
                return t.options.xLabel ? t.height - t.options.axisLabelPadding + "px" : t.height + "px";
            });
            i.exit().remove(), n.append("div").attr("class", "line").style("height", "100%"), 
            n.append("div").attr("class", "gd-label").text(function(e) {
                var i = t.formatLarge(e);
                return t.options.money && (i = "$" + i), t.options.percent && (i += "%"), i;
            }).style("bottom", "0px").style("background", function() {
                var e = d3.select(t.el).style("background-color");
                return e;
            }).style("margin-left", function() {
                var t = d3.select(this).style("width"), e = -1 * (parseInt(t) / 2);
                return e + "px";
            }).style("height", t.options.axisLabelPadding + "px").style("line-height", t.options.axisLabelPadding + "px");
        }
    },
    updateYAxis: function() {
        var t = this, e = (this.options.y, this.options.x);
        if (this.options.drawY) {
            var i = parseInt(d3.select(t.el).select(".bars").style("width"));
            isNaN(i) || (barWidth = i);
            var n = this.y.domain(), o = this.yAxisElement.selectAll(".tick").data(n);
            o.transition().style("top", function(e, i) {
                var n = 0;
                return n = 0 !== t.options.barHeight ? t.options.barHeight * i + t.options.padding * i + t.options.topPadding : t.y(e), 
                n + "px";
            }).style("right", function() {
                return "0px";
            }).style("padding-right", function(i, n) {
                var o = t.data[n][e], s = t.x(Math.min(0, o)), a = barWidth - s + 2;
                return a + "px";
            }).style("height", function() {
                return 0 !== t.options.barHeight ? t.options.barHeight + "px" : t.y.rangeBand() + "px";
            }).style("line-height", function() {
                return 0 !== t.options.barHeight ? t.options.barHeight + "px" : t.y.rangeBand() + "px";
            }).select(".gd-label").text(function(t) {
                return t;
            }), o.enter().append("div").attr("class", "tick").style("top", function(e, i) {
                var n = 0;
                return n = 0 !== t.options.barHeight ? t.options.barHeight * i + t.options.padding * i + t.options.topPadding : t.y(e), 
                n + "px";
            }).style("right", function() {
                return "0px";
            }).style("padding-right", function(i, n) {
                var o = t.data[n][e], s = t.x(Math.min(0, o)), a = barWidth - s + 2;
                return a + "px";
            }).style("height", function() {
                return 0 !== t.options.barHeight ? t.options.barHeight + "px" : t.y.rangeBand() + "px";
            }).style("line-height", function() {
                return 0 !== t.options.barHeight ? t.options.barHeight + "px" : t.y.rangeBand() + "px";
            }).on("mouseover", function(e, i) {
                t.mouseOver(e, i, this);
            }).on("mouseout", function(e, i) {
                t.mouseOut(e, i, this);
            }).append("div").attr("class", "gd-label").text(function(t) {
                return t;
            }), o.exit().remove();
        }
    },
    mouseOver: function(t, e) {
        var i, n, o = this, s = "", n = o.data[e][o.options.x], i = o.data[e][o.options.y];
        if (null !== n) {
            n = o.options.formatter(n);
            var a = {
                y: i,
                x: n
            };
            s = Mustache.render(o.options.hoverTemplate, a);
        } else s = "NA";
        var r = d3.select(o.container.selectAll(".bar")[0][e]);
        r.style("opacity", .9), o.container.select(".hoverbox").html(s), o.container.select(".hoverbox").transition().style("display", "block");
    },
    mouseOut: function(t, e) {
        for (var i = this, n = i.options.opacity, o = 0; o < i.options.highlight.length; o++) i.options.highlight[o] == t && (n = 1);
        var s = d3.select(i.container.selectAll(".bar")[0][e]);
        s.style("opacity", n), i.container.select(".hoverbox").transition().style("display", "none");
    },
    setColor: function(t) {
        this.options.barColors = t;
    }
}), GeoDash.BarChartVertical = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "BarChartVertical",
    defaults: {
        x: "x",
        y: "y",
        barColors: [ "#f00" ],
        opacity: .7,
        drawX: !1,
        drawY: !1,
        xLabel: !1,
        yLabel: !1,
        percent: !1,
        title: !1,
        roundRadius: 3,
        highlight: !1,
        verticalX: !1,
        invert: !1,
        roundRadius: 3,
        axisLabelPadding: 20,
        yaxisLabelPadding: 25,
        "class": "chart-html vertical",
        outerPadding: .5,
        hoverTemplate: "{{x}}: {{y}}",
        formatter: d3.format(",")
    },
    initialize: function() {},
    cleanData: function(t) {
        var e = this.options.y;
        this.options.x;
        for (var i = 0; i < t.length; i++) {
            var n = t[i];
            null != n[e] && "string" == typeof n[e] && (n[e] = +n[e].replace(",", ""));
        }
        return t;
    },
    update: function(t) {
        var e = this.options.y, i = this.options.x;
        this.data = t = this.cleanData(t), this.color = d3.scale.ordinal().range(this.options.barColors), 
        this.x.domain(t.map(function(t) {
            return t[i];
        }));
        var n = d3.extent(t, function(t) {
            return t[e];
        });
        n[0] < 0 ? this.y.domain(n) : this.y.domain([ 0, n[1] ]), this.updateChart(), this.updateXAxis(), 
        this.updateYAxis();
    },
    updateChart: function() {
        var t = this, e = this.options.y, i = this.options.x, n = this.container.select(".bars").selectAll(".bar").data(this.data);
        n.transition().attr("geodash-id", function(t) {
            return t[i];
        }).style("left", function(e) {
            return t.x(e[i]) + "px";
        }).style("width", t.x.rangeBand() + "px").style("bottom", function(i) {
            var n = 0;
            return n = i[e] > 0 ? t.yrange - t.y(0) : t.yrange - t.y(i[e]), n + "px";
        }).style("height", function(i) {
            var n = 0;
            return n = i[e] > 0 ? t.y(0) - t.y(i[e]) : t.y(i[e]) - t.y(0), n + "px";
        }).style("opacity", function(e) {
            return e[i] == t.options.highlight ? 1 : t.options.opacity;
        }).style("background-color", function(e) {
            return t.color(e[i]);
        }).style("border-top-right-radius", function(i) {
            return i[e] > 0 ? t.options.roundRadius + "px" : 0;
        }).style("border-top-left-radius", function(i) {
            return i[e] > 0 ? t.options.roundRadius + "px" : 0;
        }).style("border-bottom-right-radius", function(i) {
            return i[e] < 0 ? t.options.roundRadius + "px" : 0;
        }).style("border-bottom-left-radius", function(i) {
            return i[e] < 0 ? t.options.roundRadius + "px" : 0;
        }).style("background-color", function(e) {
            return t.color(e[i]);
        }), n.enter().append("div").attr("class", "bar").attr("geodash-id", function(t) {
            return t[i];
        }).style("left", function(e) {
            return t.x(e[i]) + "px";
        }).style("width", t.x.rangeBand() + "px").style("bottom", function(i) {
            var n = 0;
            return n = i[e] > 0 ? t.yrange - t.y(0) : t.yrange - t.y(i[e]), n + "px";
        }).style("height", function(i) {
            var n = 0;
            return n = i[e] > 0 ? t.y(0) - t.y(i[e]) : t.y(i[e]) - t.y(0), n + "px";
        }).style("opacity", function(e) {
            return e[i] == t.options.highlight ? 1 : t.options.opacity;
        }).style("background-color", function(e) {
            return t.color(e[i]);
        }).style("border-top-right-radius", function(i) {
            return i[e] > 0 ? t.options.roundRadius + "px" : 0;
        }).style("border-top-left-radius", function(i) {
            return i[e] > 0 ? t.options.roundRadius + "px" : 0;
        }).style("border-bottom-right-radius", function(i) {
            return i[e] < 0 ? t.options.roundRadius + "px" : 0;
        }).style("border-bottom-left-radius", function(i) {
            return i[e] < 0 ? t.options.roundRadius + "px" : 0;
        }).on("mouseover", function(e, i) {
            t.mouseOver(e, i, this);
        }).on("mouseout", function(e, i) {
            t.mouseOut(e, i, this);
        }), n.exit().remove();
    },
    mouseOver: function(t, e, i) {
        var n, o, s = this, a = "", o = s.data[e][s.options.x], n = s.data[e][s.options.y];
        if (null !== n) {
            n = s.options.formatter(n);
            var r = {
                y: n,
                x: o
            };
            a = Mustache.render(s.options.hoverTemplate, r);
        } else a = "NA";
        d3.select(i).style("opacity", .9), s.container.select(".hoverbox").html(a), s.container.select(".hoverbox").transition().style("display", "block");
    },
    mouseOut: function(t, e, i) {
        var n = this, o = n.options.opacity;
        t[n.options.x] == n.options.highlight && (o = 1), d3.select(i).style("opacity", o), 
        n.container.select(".hoverbox").transition().style("display", "none");
    },
    setColor: function(t) {
        this.options.barColors = t;
    }
});