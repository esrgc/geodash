var _ezoop = window.ezoop, ezoop = function() {};

ezoop.noConflict = function() {
    return window.ezoop = _ezoop, this;
}, window.ezoop = ezoop, ezoop.ExtendedClass = function(t, i) {
    return ezoop.Class(t, i);
}, ezoop.BaseClass = function(t) {
    return ezoop.Class(null, t);
}, ezoop.Class = function(t, i) {
    var e = null, s = ezoop.Class;
    return null == t || "undefined" == typeof t ? (e = function() {
        "undefined" != typeof this.initialize && this.initialize.apply(this, arguments);
    }, e.prototype = i) : (e = function() {
        if ("undefined" != typeof t.prototype) {
            var i = t.prototype.initialize;
            "function" == typeof i && i.apply(this, arguments);
        }
        var e = "function" == typeof this.initialize ? this.initialize : "undefined";
        "function" == typeof e && e.apply(this, arguments);
    }, s.inheritPrototype(e, t), s.augmentPrototype(e.prototype, i)), e;
}, ezoop.Class.inheritPrototype = function(t, i) {
    var e = function() {};
    e.prototype = i.prototype, t.prototype = new e(), t.prototype.constructor = t, t.parent = i.prototype;
}, ezoop.Class.augmentPrototype = function(t, i) {
    if (t = t || {}, i) {
        for (var e in i) {
            var s = i[e];
            void 0 !== s && (t[e] = s);
        }
        var o = "function" == typeof window.Event && i instanceof window.Event;
        !o && i.hasOwnProperty && i.hasOwnProperty("toString") && (t.toString = i.toString);
    }
};

var oldGeoDash = window.GeoDash, GeoDash = function() {};

GeoDash.version = "0.1-dev", GeoDash.noConflict = function() {
    return window.GeoDash = oldGeoDash, this;
}, window.GeoDash = GeoDash, GeoDash.Class = function(t) {
    var i = t, e = i.extend, s = null, o = GeoDash.Class;
    return null == e || "undefined" == typeof e ? (s = function() {
        "undefined" != typeof this.initialize && this.initialize.apply(this, arguments);
    }, s.prototype = i) : (s = function() {
        if ("undefined" != typeof e.prototype) {
            var t = e.prototype.initialize;
            "function" == typeof t && t.apply(this, arguments);
        }
        var i = "function" == typeof this.initialize ? this.initialize : "undefined";
        "function" == typeof i && i.apply(this, arguments);
    }, o.inheritPrototype(s, e), o.augmentPrototype(s.prototype, i)), s;
}, GeoDash.Class.inheritPrototype = function(t, i) {
    var e = function() {};
    e.prototype = i.prototype, t.prototype = new e(), t.prototype.constructor = t, t.parent = i.prototype;
}, GeoDash.Class.augmentPrototype = function(t, i) {
    if (t = t || {}, i) {
        for (var e in i) {
            var s = i[e];
            void 0 !== s && (t[e] = s);
        }
        var o = "function" == typeof window.Event && i instanceof window.Event;
        !o && i.hasOwnProperty && i.hasOwnProperty("toString") && (t.toString = i.toString);
    }
}, GeoDash.Chart = ezoop.BaseClass({
    className: "Chart",
    initialize: function(t, i) {
        this.el = t, this.options = {}, this.setOptions(i), this.makeTitle(), this.drawChart();
    },
    setOptions: function(t) {
        for (var i in this.defaults) this.defaults.hasOwnProperty(i) && void 0 === t[i] && (t[i] = this.defaults[i]);
        this.options = t;
    },
    drawChart: function() {},
    update: function() {},
    makeTitle: function() {
        if (this.options.title) {
            var t = '<div class="title">';
            t += this.options.title, t += "</div>", d3.select(this.el).html(t);
        }
    }
}), GeoDash.BarChart = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "BarChart",
    defaults: {
        x: "x",
        y: "y",
        barColor: "#f00",
        opacity: .7,
        drawX: !0,
        percent: !1,
        title: !1
    },
    initialize: function() {},
    drawChart: function() {
        this.margin = {
            top: 20,
            right: 10,
            bottom: 20,
            left: 40
        }, this.width = ("auto" === this.options.width || void 0 === this.options.width ? parseInt(d3.select(this.el).style("width")) : this.options.width) - this.margin.left - this.margin.right, 
        this.height = ("auto" === this.options.height || void 0 === this.options.height ? parseInt(d3.select(this.el).style("height")) : this.options.height) - this.margin.top - this.margin.bottom, 
        this.options.title && (this.height = this.height - 21), this.formatPercent = d3.format(".0%"), 
        this.x = d3.scale.ordinal().rangeRoundBands([ 0, this.width ], .05, .5), this.y = d3.scale.linear().range([ this.height, 0 ]), 
        this.xAxis = d3.svg.axis().scale(this.x).orient("bottom").tickFormat(function() {
            return "";
        }), this.yAxis = d3.svg.axis().scale(this.y).orient("left").ticks(4).tickSize(-1 * this.width, 0, 0), 
        this.options.percent && this.yAxis.tickFormat(this.formatPercent), this.svg = d3.select(this.el).append("svg").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).attr("class", "barchart-svg").append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
    },
    update: function(t) {
        var i = this, e = this.options.y, s = this.options.x;
        t.forEach(function(t) {
            t[e] = +t[e];
        }), this.x.domain(t.map(function(t) {
            return t[s];
        })), this.y.domain([ 0, d3.max(t, function(t) {
            return t[e];
        }) ]), this.options.drawX && this.svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(this.xAxis), 
        this.svg.append("g").attr("class", "y axis").call(this.yAxis), this.svg.selectAll(".bar").data(t).enter().append("rect").attr("class", "bar").attr("x", function(t) {
            return i.x(t[s]);
        }).attr("width", i.x.rangeBand()).attr("y", function(t) {
            return i.y(t[e]);
        }).attr("height", function(t) {
            return i.height - i.y(t[e]);
        }).style("fill-opacity", this.options.opacity).style("fill", this.options.barColor).on("mouseover", function() {
            d3.select(this).style("fill-opacity", 1);
        }).on("mouseout", function() {
            d3.select(this).style("fill-opacity", i.options.opacity);
        });
    }
}), GeoDash.LineChart = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "LineChart",
    defaults: {
        x: "x",
        y: "y",
        width: "auto",
        height: "auto",
        colors: [ "#d80000", "#006200" ],
        interpolate: "monotone",
        dotRadius: 3,
        title: !1,
        opacity: .5,
        strokeWidth: 2
    },
    initialize: function() {},
    drawChart: function() {
        var t = this;
        this.margin = {
            top: 10,
            right: 20,
            bottom: 30,
            left: 50
        }, this.width = ("auto" === this.options.width || void 0 === this.options.width ? parseInt(d3.select(this.el).style("width")) : this.options.width) - this.margin.left - this.margin.right, 
        this.height = ("auto" === this.options.height || void 0 === this.options.height ? parseInt(d3.select(this.el).style("height")) : this.options.height) - this.margin.top - this.margin.bottom, 
        this.options.title && (this.height = this.height - 21), this.x = d3.time.scale().range([ 0, this.width ]), 
        this.y = d3.scale.linear().range([ this.height, 0 ]), this.xAxis = d3.svg.axis().scale(this.x).tickSize(-1 * this.height).orient("bottom"), 
        this.yAxis = d3.svg.axis().scale(this.y).tickSize(-1 * this.width).tickFormat(d3.format("s")).orient("left"), 
        this.color = d3.scale.ordinal().range(this.options.colors), this.line = d3.svg.line().interpolate(this.options.interpolate).x(function(i) {
            return t.x(i.date);
        }).y(function(i) {
            return t.y(i.value);
        }), this.formatComma = d3.format(",f.2");
        var i = d3.select(this.el).append("svg").attr("width", this.width + this.margin.left + this.margin.right).attr("height", this.height + this.margin.top + this.margin.bottom).attr("class", "linechart-svg").append("g").attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
        i.append("g").attr("class", "x axis").attr("transform", "translate(0," + this.height + ")").call(this.xAxis), 
        i.append("g").attr("class", "y axis").call(this.yAxis), d3.select(t.el).append("div").attr("class", "linehoverbox");
    },
    hoverOnDot: function(t, i, e) {
        var s = this, o = this.formatComma(t.value), n = 55 + this.x(t.date), a = 45 + this.y(t.value);
        d3.select(e).transition().attr("r", this.options.dotRadius + 3);
        var r = d3.select(".line")[0][0].getBBox().width;
        this.x(t.date) >= r && (n -= 55), d3.select(s.el).select(".linehoverbox").style("left", n + "px"), 
        d3.select(s.el).select(".linehoverbox").style("top", a + "px"), d3.select(s.el).select(".linehoverbox").html(o), 
        d3.select(s.el).select(".linehoverbox").transition().style("display", "block");
    },
    hoverOffDot: function(t, i, e) {
        var s = this;
        d3.select(s.el).select(".linehoverbox").transition().style("display", "none"), d3.select(e).transition().attr("r", this.options.dotRadius);
    },
    update: function(t) {
        var i = this;
        this.color.domain(d3.keys(t[0]).filter(function(t) {
            return t !== i.options.x;
        }));
        var e = this.color.domain().map(function(e) {
            return {
                name: e,
                values: t.map(function(t) {
                    return {
                        date: t[i.options.x],
                        value: +t[e]
                    };
                })
            };
        });
        this.x.domain(d3.extent(t, function(t) {
            return t[i.options.x];
        })), this.y.domain([ d3.min(e, function(t) {
            return d3.min(t.values, function(t) {
                return t.value;
            });
        }), d3.max(e, function(t) {
            return d3.max(t.values, function(t) {
                return t.value;
            });
        }) ]);
        var s = d3.select(this.el + " svg g");
        this.xAxis.ticks(t.length), s.select(".y.axis").transition().call(this.yAxis), s.select(".x.axis").transition().call(this.xAxis);
        var o = function(t, i) {
            return 10 * i;
        }, n = s.selectAll(".line").data(e);
        n.transition().duration(500).delay(o).attr("d", function(t) {
            return i.line(t.values);
        }), n.enter().append("path").attr("class", "line").attr("d", function(t) {
            return i.line(t.values);
        }).style("stroke", function(t) {
            return i.color(t.name);
        }).style("stroke-width", i.options.strokeWidth).style("stroke-opacity", i.options.opacity);
        for (var a = 0; a < e.length; a++) {
            var r = e[a].values, h = s.selectAll(".dotset" + a).data(r);
            h.transition().duration(500).delay(o).attr("data", function(t) {
                return t.value;
            }).attr("cx", function(t) {
                return i.x(t[i.options.x]);
            }).attr("cy", function(t) {
                return i.y(t.value);
            }), h.enter().append("circle").attr("class", "dot dotset" + a).attr("r", this.options.dotRadius).style("fill", function() {
                return i.color(e[a].name);
            }).style("fill-opacity", i.options.opacity).attr("data", function(t) {
                return t.value;
            }).on("mouseover", function(t, e) {
                i.hoverOnDot(t, e, this);
            }).on("mouseout", function(t, e) {
                i.hoverOffDot(t, e, this);
            }).attr("cx", function(t) {
                return i.x(t[i.options.x]);
            }).attr("cy", function(t) {
                return i.y(t.value);
            });
        }
    }
}), GeoDash.PieChart = ezoop.ExtendedClass(GeoDash.Chart, {
    className: "PieChart",
    defaults: {
        label: "label",
        value: "value",
        colors: [ "#f00", "#0f0", "#00f" ],
        innerRadius: 10,
        opacity: 1,
        drawX: !0,
        drawY: !0,
        title: !1,
        padding: 10,
        legend: !1
    },
    initialize: function() {},
    drawChart: function() {
        var t = this;
        this.width = "auto" === this.options.width || void 0 === this.options.width ? parseInt(d3.select(this.el).style("width")) : this.options.width, 
        this.height = "auto" === this.options.height || void 0 === this.options.width ? parseInt(d3.select(this.el).style("height")) : this.options.height, 
        this.width = this.width - 2 * this.options.padding, this.height = this.height - 2 * this.options.padding, 
        this.options.title && (this.height = this.height - 21), this.radius = Math.min(this.width, this.height) / 2.2, 
        this.color = d3.scale.ordinal().range(this.options.colors), this.x = d3.scale.ordinal().range([ 0, this.width - 2 ]), 
        this.y = d3.scale.linear().range([ this.height - 2, 0 ]), this.xAxis = d3.svg.axis().scale(this.x).orient("bottom").tickSize(10, 0, 0).tickFormat(function() {
            return "";
        }), this.yAxis = d3.svg.axis().scale(this.y).orient("left").tickSize(10, 0, 0).tickFormat(function() {
            return "";
        }), this.arc = d3.svg.arc().outerRadius(this.radius).innerRadius(this.options.innerRadius), 
        this.pie = d3.layout.pie().sort(null).value(function(i) {
            return i[t.options.value];
        }), this.svg = d3.select(this.el).append("svg").attr("width", this.width).attr("height", this.height).attr("class", "piechart-svg").append("g").attr("transform", "translate(" + this.width / 2 + "," + this.height / 2 + ")"), 
        this.options.drawX && (this.svg.append("g").attr("class", "x axis").attr("transform", "translate(" + -1 * (this.width / 2) + "," + 0 + ")").call(this.xAxis), 
        this.svg.select(".x.axis").selectAll(".tick").attr("transform", "translate(0,-5)")), 
        this.options.drawY && (this.svg.append("g").attr("class", "y axis").attr("transform", "translate(0," + -1 * (this.height / 2) + ")").call(this.yAxis), 
        this.svg.select(".y.axis").selectAll(".tick").attr("transform", "translate(5,0)")), 
        this.options.legend && d3.select(this.options.legend).append("svg");
    },
    update: function(t) {
        var i = this;
        t.forEach(function(t) {
            t[i.options.value] = +t[i.options.value];
        }), this.x.domain([ 0, 1 ]), this.y.domain([ 0, 1 ]), this.xAxis.tickValues([ 0, 1 ]), 
        this.yAxis.tickValues([ 0, 1 ]), this.options.drawX && svg.select(".x.axis").transition().call(this.xAxis), 
        this.options.drawY && svg.select(".y.axis").transition().call(this.yAxis);
        var e = this.svg.selectAll(".arc").data(this.pie(t));
        if (e.select("path").transition().attr("d", this.arc), e.enter().append("g").attr("class", "arc").append("path").attr("d", this.arc).style("fill", function(t) {
            return i.color(t.data[i.options.label]);
        }).style("fill-opacity", this.options.opacity).on("mouseover", function(t) {
            d3.select(i.el).select(".hoverbox").html(t.value + "%"), d3.select(this).style("fill-opacity", 1);
        }).on("mouseout", function() {
            d3.select(i.el).select(".hoverbox").html(""), d3.select(this).style("fill-opacity", i.options.opacity);
        }), this.options.legend) {
            parseInt(d3.select(this.options.legend).style("width"));
            var s = {
                width: 10,
                height: 10,
                padding: 5
            }, o = d3.select(this.options.legend).select("svg"), n = o.selectAll(".legend-item").data(this.color.domain().slice());
            n.select(".legend-item").select("text").text(function(t) {
                return t;
            });
            var a = n.enter().append("g").attr("class", "legend-item").attr("transform", function(t, i) {
                return "translate(0," + i * (s.height + s.padding) + ")";
            });
            a.append("rect").attr("x", 0).attr("width", s.width).attr("height", s.height).style("fill", this.color), 
            a.append("text").attr("x", s.width + s.padding).attr("y", 4).attr("dy", ".35em").style("text-anchor", "start").text(function(t) {
                return t;
            });
        }
    }
});